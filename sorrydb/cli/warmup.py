#!/usr/bin/env python3
"""
Warmup script for MorphCloud two-phase execution.
Initializes LeanServer and provides execution functions in Python REPL.

Usage:
    python -i sorrydb/cli/warmup.py
    or:
    tmux new-session -d -s lean_repl "python -i sorrydb/cli/warmup.py"
"""

import json
import sys
import traceback
from pathlib import Path
from datetime import datetime

# Ensure SorryDB is on path
SORRYDB_ROOT = Path(__file__).parents[2]
sys.path.insert(0, str(SORRYDB_ROOT))

from lean_interact import LeanServer, LeanREPLConfig, LocalProject
from sorrydb.database.sorry import Sorry, SorryResult, SorryJSONEncoder
from sorrydb.cli.run_morphcloud_local import create_strategy_from_spec

# Global state
REPO_PATH = Path.home() / "repo"
lean_server = None
warmup_time = None

def initialize_lean_server():
    """Initialize LeanServer (expensive ~30-60s)"""
    global lean_server, warmup_time

    print(f"[WARMUP] Starting at {datetime.now().isoformat()}", flush=True)
    print(f"[WARMUP] Repository path: {REPO_PATH}", flush=True)
    print("[WARMUP] Initializing LeanServer...", flush=True)

    try:
        project = LocalProject(directory=str(REPO_PATH.resolve()))
        config = LeanREPLConfig(project=project, verbose=False)
        lean_server = LeanServer(config)
        warmup_time = datetime.now()

        print("WARMUP_COMPLETE", flush=True)
        print(f"[WARMUP] LeanServer ready at {warmup_time.isoformat()}", flush=True)
        return True
    except Exception as e:
        print(f"WARMUP_FAILED: {e}", flush=True)
        traceback.print_exc()
        return False

def verify_with_existing_server(location, proof_str):
    """Verify proof using persistent LeanServer"""
    from sorrydb.utils.verify_lean_interact import verify_lean_interact_with_server

    return verify_lean_interact_with_server(
        lean_server,
        REPO_PATH,
        location,
        proof_str
    )

def execute_sorry(sorry_json_str: str, strategy_spec_str: str) -> dict:
    """
    Execute strategy using persistent LeanServer.

    Args:
        sorry_json_str: JSON string of Sorry object
        strategy_spec_str: JSON string of strategy spec ({"name": "...", "args": {...}})

    Returns:
        Dict representation of SorryResult
    """
    global lean_server

    if lean_server is None:
        return {
            "error": "LeanServer not initialized",
            "sorry": None,
            "proof": None,
            "proof_verified": False
        }

    try:
        print(f"[EXEC] Starting execution at {datetime.now().isoformat()}", flush=True)

        # Parse inputs
        print("[EXEC] Parsing sorry JSON...", flush=True)
        sorry = Sorry.from_dict(json.loads(sorry_json_str))
        print(f"[EXEC] Sorry ID: {sorry.id}", flush=True)
        print(f"[EXEC] Location: {sorry.location.path}:{sorry.location.start_line}", flush=True)

        print("[EXEC] Creating strategy...", flush=True)
        strategy = create_strategy_from_spec(strategy_spec_str)
        print(f"[EXEC] Strategy: {type(strategy).__name__}", flush=True)

        # Execute strategy
        print("[EXEC] Running prove_sorry()...", flush=True)
        proof = strategy.prove_sorry(REPO_PATH, sorry)
        print(f"[EXEC] Proof generated: {proof is not None}", flush=True)
        if proof:
            print(f"[EXEC] Proof length: {len(proof)} chars", flush=True)

        # Verify with persistent server
        verified = False
        msg = None

        if proof:
            print("[EXEC] Verifying proof with persistent LeanServer...", flush=True)
            verified, msg = verify_with_existing_server(sorry.location, proof)
            print(f"[EXEC] Verification result: {verified}", flush=True)
            if msg:
                print(f"[EXEC] Verification message: {msg[:200]}", flush=True)
        else:
            msg = "No proof generated by strategy"
            print(f"[EXEC] {msg}", flush=True)

        # Build result
        result = SorryResult(
            sorry=sorry,
            proof=proof,
            proof_verified=verified,
            feedback=None,
            verification_message=msg
        )

        result_dict = json.loads(json.dumps(result, cls=SorryJSONEncoder))
        print(f"[EXEC] Complete at {datetime.now().isoformat()}", flush=True)

        return result_dict

    except Exception as e:
        error_msg = f"Exception during execution: {str(e)}"
        print(f"[EXEC] ERROR: {error_msg}", flush=True)
        traceback.print_exc()

        return {
            "error": error_msg,
            "sorry": json.loads(sorry_json_str) if sorry_json_str else None,
            "proof": None,
            "proof_verified": False,
            "verification_message": error_msg
        }

def exec_and_save(sorry_json_str: str, strategy_spec_str: str, output_path: str = "/tmp/result.json"):
    """
    Execute and save result to file (convenience wrapper).

    Returns:
        Path to result file
    """
    try:
        print(f"[EXEC] Output path: {output_path}", flush=True)
        result = execute_sorry(sorry_json_str, strategy_spec_str)

        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)
        output_file.write_text(json.dumps(result, indent=2))

        print(f"RESULT_SAVED:{output_path}", flush=True)
        return output_path

    except Exception as e:
        error_msg = f"Failed to save result: {e}"
        print(f"[EXEC] ERROR: {error_msg}", flush=True)
        traceback.print_exc()

        # Try to save error result
        error_result = {"error": error_msg, "proof_verified": False}
        try:
            Path(output_path).write_text(json.dumps(error_result))
            print(f"ERROR_SAVED:{output_path}", flush=True)
        except:
            pass

        return None

def status():
    """Print current status"""
    print(f"Repository: {REPO_PATH}", flush=True)
    print(f"LeanServer initialized: {lean_server is not None}", flush=True)
    if warmup_time:
        print(f"Warmup completed: {warmup_time.isoformat()}", flush=True)
    print(f"Available functions: execute_sorry(), exec_and_save(), status()", flush=True)

# Auto-run warmup
print("[WARMUP] Auto-initializing...", flush=True)
if initialize_lean_server():
    print("[WARMUP] Ready for commands", flush=True)
    print("[WARMUP] Use: exec_and_save(sorry_json, strategy_json, output_path)", flush=True)
else:
    print("[WARMUP] Initialization failed - check logs", flush=True)

# REPL will start here due to `python -i` flag
