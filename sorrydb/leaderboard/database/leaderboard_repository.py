from typing import List, Optional, Protocol, Sequence

from sorrydb.leaderboard.model.agent import Agent
from sorrydb.leaderboard.model.challenge import Challenge
from sorrydb.leaderboard.model.sorry import SQLSorry


class SQLDatabase(Protocol):
    """
    Repository protocol defining the interface for leaderboard storage.

    As we add features to the Leaderboard, this might should be split into seperate repositorys,
    i.e., UserRepository, AgentRepository, ChallengeRepository, SorryRepository, etc....
    """

    def add_agent(self, agent: Agent) -> None: ...

    def add_challenge(self, challenge: Challenge) -> None: ...

    def update_challenge(
        self, challenge_id: str, updated_challenge: Challenge
    ) -> None: ...

    def get_agents(self, skip, limit) -> List[Agent]: ...

    def get_agent(self, agent_id: str) -> Agent: ...

    def get_challenges(
        self, agent_id: str, skip: int, limit: int
    ) -> List[Challenge]: ...

    def get_challenge(self, challenge_id: str) -> Challenge: ...

    def get_sorry(self) -> Optional[SQLSorry]: ...

    def get_random_unattempted_sorry(self, agent: Agent) -> Optional[SQLSorry]: ...

    def get_latest_unattempted_sorry(self, agent: Agent) -> Optional[SQLSorry]: ...

    def get_unattempted_sorry(self, agent: Agent) -> Optional[SQLSorry]: ...

    def add_sorry(self, sorry: SQLSorry): ...

    def add_sorries(self, sorries: list[SQLSorry]) -> Sequence[SQLSorry]: ...
