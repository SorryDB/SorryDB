{
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "d006ffed310f1e6a3542f4ff776be2d266127034",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 39,
        "start_column": 2,
        "end_line": 39,
        "end_column": 7,
        "path": "Compfiles/Imo2022P3.lean"
      },
      "debug_info": {
        "goal": "k : ‚Ñï\nhk : 0 < k\nS : Finset ‚Ñï\nhS : ‚àÄ p ‚àà S, Odd p ‚àß Nat.Prime p\np‚ÇÅ p‚ÇÇ : Fin S.card ‚âÉ { x // x ‚àà S }\nhp‚ÇÅ : Imo2022P3.Condition k S p‚ÇÅ\nhp‚ÇÇ : Imo2022P3.Condition k S p‚ÇÇ\n‚ä¢ (‚àÉ i, ‚àÄ (j : Fin S.card), p‚ÇÇ j = p‚ÇÅ (j + i)) ‚à® ‚àÉ i, ‚àÄ (j : Fin S.card), p‚ÇÇ j = p‚ÇÅ (j.rev + i)",
        "url": "https://github.com/dwrensha/compfiles/blob/d006ffed310f1e6a3542f4ff776be2d266127034/Compfiles/Imo2022P3.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "acdd9d7e744e",
        "blame_date": "2025-04-15T08:25:26-04:00",
        "inclusion_date": "2025-06-12T03:15:19.854603+00:00"
      },
      "id": "28d6794c7391cdb709c0154100ddceb2e6e842d6247dea7efd0ba3697dd5600d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 191,
        "start_column": 4,
        "end_line": 191,
        "end_column": 9,
        "path": "Foundation/Modal/MaximalConsistentSet.lean"
      },
      "debug_info": {
        "goal": "case inl\nŒ± : Type u_1\nS : Type u_2\ninst‚úù¬≥ : Entailment (Formula Œ±) S\nùì¢ : S\ninst‚úù¬≤ : DecidableEq Œ±\nT : FormulaSet Œ±\ninst‚úù¬π : Entailment.Cl ùì¢\nœÜ : Formula Œ±\ninst‚úù : Necessitation ùì¢\nT_consis : Consistent ùì¢ T\nh : ‚àº‚ñ°œÜ ‚àà T\nhŒì : ‚Üë‚àÖ ‚äÜ {‚àºœÜ}\n‚ä¢ ‚Üë‚àÖ *‚ä¨[ùì¢] ‚ä•",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/MaximalConsistentSet.lean#L191"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-05-12T12:29:45+09:00",
        "inclusion_date": "2025-05-15T23:27:40.059657+00:00"
      },
      "id": "16bf128716f7898dc911f671d8ef2b1417c9789e709da5084d5ac4000b39f3c6"
    },
    {
      "repo": {
        "remote": "https://github.com/fpvandoorn/carleson",
        "branch": "master",
        "commit": "7f3aec87f4bc813888feceb76a9751e397c89034",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 330,
        "start_column": 6,
        "end_line": 330,
        "end_column": 11,
        "path": "Carleson/Antichain/Basic.lean"
      },
      "debug_info": {
        "goal": "case h.e'_3.h.e'_5.h.h.e'_1.h.e'_11.e_a\nX : Type u_1\na : ‚Ñï\nq : ‚Ñù\nK : X ‚Üí X ‚Üí ‚ÑÇ\nœÉ‚ÇÅ œÉ‚ÇÇ : X ‚Üí ‚Ñ§\nF G : Set X\ninst‚úù¬≤ : MetricSpace X\ninst‚úù¬π : ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G\ninst‚úù : TileStructure Q (defaultD a) (defaultŒ∫ a) (defaultS X) (cancelPt X)\nùîÑ : Finset (ùîì X)\nhùîÑ : IsAntichain (fun x1 x2 => x1 ‚â§ x2) ‚ÜëùîÑ\nf : X ‚Üí ‚ÑÇ\nhf : ‚àÄ (x : X), ‚Äñf x‚Äñ ‚â§ F.indicator 1 x\nhfm : Measurable f\np‚ÇÅ : NNReal := 2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2)\nhp‚ÇÅ : p‚ÇÅ = 2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2)\naux : 0 < 3 * (2 * nnq X / (nnq X + 1)) - 2\nhp‚ÇÅ_ge : 1 ‚â§ p‚ÇÅ\nhp‚ÇÅ_lt : p‚ÇÅ < 2\nhf1 : AEStronglyMeasurable f volume\nhf_top : eLpNorm f 2 volume < ‚ä§\nthis :\n  HasStrongType (fun f x => maximalFunction volume (‚ÜëùîÑ) ùî† (fun ùî≠ => 8 * ‚Üë(defaultD a) ^ ùî∞ ùî≠) (‚Üëp‚ÇÅ) f x) 2 2 volume\n    volume ‚Üë(C2_0_6 (2 ^ a) p‚ÇÅ 2)\nhh :\n  eLpNorm\n      (fun x2 =>\n        (maximalFunction volume (‚ÜëùîÑ) ùî† (fun ùî≠ => 8 * ‚Üë(defaultD a) ^ ùî∞ ùî≠)\n            (‚Üë(2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2))) f x2).toReal)\n      2 volume ‚â§\n    ‚Üë(CMB (2 ^ a) (2 / (2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2))) ^\n          (‚Üë(2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2)))‚Åª¬π) *\n      eLpNorm f 2 volume\nx‚úù : X\n‚ä¢ 3 * (2 * ‚Üë(nnq X) / (‚Üë(nnq X) + 1)) - 2 = ‚Üë(3 * (2 * nnq X / (nnq X + 1)) - 2)",
        "url": "https://github.com/fpvandoorn/carleson/blob/7f3aec87f4bc813888feceb76a9751e397c89034/Carleson/Antichain/Basic.lean#L330"
      },
      "metadata": {
        "blame_email_hash": "44a80a4a9c95",
        "blame_date": "2025-06-04T11:19:38+02:00",
        "inclusion_date": "2025-06-12T03:25:58.623874+00:00"
      },
      "id": "4322df03e48f81a4335489bb02789bbbb501d868e90baa2e58207ec0fb46d749"
    },
    {
      "repo": {
        "remote": "https://github.com/ImperialCollegeLondon/FLT",
        "branch": "auto-update-lean/patch",
        "commit": "a7c7ddfb1ac681c3e3f1d050c84a3d4da8cb62f9",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 79,
        "start_column": 22,
        "end_line": 79,
        "end_column": 27,
        "path": "FLT/HaarMeasure/HaarChar/AdeleRing.lean"
      },
      "debug_info": {
        "goal": "K : Type u_1\nL : Type u_2\ninst‚úù¬π‚Å∞ : Field K\ninst‚úù‚Åπ : Field L\ninst‚úù‚Å∏ : Algebra K L\ninst‚úù‚Å∑ : NumberField K\ninst‚úù‚Å∂ : NumberField L\nV : Type u_3\ninst‚úù‚Åµ : AddCommGroup V\ninst‚úù‚Å¥ : Module L V\ninst‚úù¬≥ : Module K V\ninst‚úù¬≤ : IsScalarTower K L V\ninst‚úù¬π : FiniteDimensional L V\ninst‚úù : FiniteDimensional K V\n‚ä¢ failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/ImperialCollegeLondon/FLT/blob/a7c7ddfb1ac681c3e3f1d050c84a3d4da8cb62f9/FLT/HaarMeasure/HaarChar/AdeleRing.lean#L79"
      },
      "metadata": {
        "blame_email_hash": "c7989443bd81",
        "blame_date": "2025-06-07T23:01:07+01:00",
        "inclusion_date": "2025-06-09T04:24:23.505775+00:00"
      },
      "id": "b354ea7902dc02303a394e5441974368c84b9f26c4b3e840f597b90fe1ccc0aa"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/quote4",
        "branch": "master",
        "commit": "e1d2994e0acdee2f0c03c9d84d28a5df34aa0020",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 16,
        "start_column": 18,
        "end_line": 16,
        "end_column": 23,
        "path": "examples/introQ.lean"
      },
      "debug_info": {
        "goal": "¬´$P¬ª : ‚àÄ {n : Nat}, n = 1\n$fst‚úù : Nat\n¬´$m¬ª : $fst‚úù = 1\n‚ä¢ $fst‚úù = 1",
        "url": "https://github.com/leanprover-community/quote4/blob/e1d2994e0acdee2f0c03c9d84d28a5df34aa0020/examples/introQ.lean#L16"
      },
      "metadata": {
        "blame_email_hash": "1c4ac4603b04",
        "blame_date": "2023-07-14T18:25:43-07:00",
        "inclusion_date": "2025-06-05T03:15:24.847837+00:00"
      },
      "id": "5712df06e39bcfa2c362f010fa5a30d151af90f2b3d10f657836d4fb68d763bc"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "0f56e6f6463c4d8d406de52cc69b29036e4bed7b",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 18,
        "start_column": 50,
        "end_line": 18,
        "end_column": 55,
        "path": "Duper/Tests/test_continuity.lean"
      },
      "debug_info": {
        "goal": "a : Real\n‚ä¢ dist a a = zero",
        "url": "https://github.com/leanprover-community/duper/blob/0f56e6f6463c4d8d406de52cc69b29036e4bed7b/Duper/Tests/test_continuity.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-05-14T23:19:01.080875+00:00"
      },
      "id": "f44f898036e0dc7614077ce5565e09d3488e31c69d59e89890de3e29cad71ab7"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "main",
        "commit": "5e6a77528fb6cace1f0adf2563e4e1bc1da541ae",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 23,
        "start_column": 2,
        "end_line": 24,
        "end_column": 5,
        "path": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "‚ä¢ 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/5e6a77528fb6cace1f0adf2563e4e1bc1da541ae/BatteriesTest/lint_unreachableTactic.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-06-12T03:48:30.363554+00:00"
      },
      "id": "d13d52b89f618b44b8a9925261f7af3022b188787513b5f8405a758f38ff6c14"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/aesop",
        "branch": "master",
        "commit": "d279b56adead908de8bd086ea46b82895cf4f12c",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 31,
        "start_column": 2,
        "end_line": 31,
        "end_column": 7,
        "path": "AesopTest/205.lean"
      },
      "debug_info": {
        "goal": "Œ± : Type u_1\nx y a b : Œ±\nh‚ÇÇ : R x a\nh‚ÇÉ : R y b\nfwd : R b y\nfwd_1 : R a x\nfwd_2 : R b b\nfwd_3 : R y y\nfwd_4 : R a a\nfwd_5 : R x x\n‚ä¢ False",
        "url": "https://github.com/leanprover-community/aesop/blob/d279b56adead908de8bd086ea46b82895cf4f12c/AesopTest/205.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "555bc3b21621",
        "blame_date": "2025-04-29T23:07:06+02:00",
        "inclusion_date": "2025-04-30T23:33:22.583043+00:00"
      },
      "id": "2ed3ed49a5906744d12cce67d1175d136b7f420f696980938c3b66e07db8e8de"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/LeanCamCombi",
        "branch": "master",
        "commit": "5df79658756ef6d112f2464eec3aece31e35cc83",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 46,
        "start_column": 75,
        "end_line": 46,
        "end_column": 80,
        "path": "LeanCamCombi/ExtrProbCombi/BinomialRandomGraph.lean"
      },
      "debug_info": {
        "goal": "Œ± : Type u_1\nŒ© : Type u_2\ninst‚úù : MeasurableSpace Œ©\nG : Œ© ‚Üí SimpleGraph Œ±\np : ‚Ñù‚â•0\nŒº : Measure Œ©\nhG : IsBinomialRandomGraph G p Œº\n‚ä¢ iIndepFun (fun e œâ => e ‚àà (G œâ).edgeSet) Œº",
        "url": "https://github.com/YaelDillies/LeanCamCombi/blob/5df79658756ef6d112f2464eec3aece31e35cc83/LeanCamCombi/ExtrProbCombi/BinomialRandomGraph.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-06T17:45:28+00:00",
        "inclusion_date": "2025-04-18T00:01:05.296811+00:00"
      },
      "id": "46b51bb59c19a979862a472d54fe0443db1e06fd4900df7d9725c480a4a05693"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "AK_work",
        "commit": "deda78cba510ad49b82f668e79ee458be78c6a0e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 158,
        "start_column": 4,
        "end_line": 158,
        "end_column": 9,
        "path": "PrimeNumberTheoremAnd/AlphaProofTest3.lean"
      },
      "debug_info": {
        "goal": "Smooth1 : (‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù\nSmoothingF : ‚Ñù ‚Üí ‚Ñù\nc‚ÇÅ : ‚Ñù\nc‚ÇÅ_pos : 0 < c‚ÇÅ\nc‚ÇÅ_lt : c‚ÇÅ < 1\nhc‚ÇÅ : ‚àÄ (Œµ x : ‚Ñù), 0 < Œµ ‚Üí 0 < x ‚Üí x ‚â§ 1 - c‚ÇÅ * Œµ ‚Üí Smooth1 SmoothingF Œµ x = 1\nc‚ÇÇ : ‚Ñù\nc‚ÇÇ_pos : 0 < c‚ÇÇ\nc‚ÇÇ_lt : c‚ÇÇ < 1\nhc‚ÇÇ : ‚àÄ (Œµ x : ‚Ñù), Œµ ‚àà Ioo 0 1 ‚Üí 1 + c‚ÇÇ * Œµ ‚â§ x ‚Üí Smooth1 SmoothingF Œµ x = 0\nC_gt' : 3 < c‚ÇÅ + c‚ÇÇ + 3\nC : ‚Ñù\nC_eq : C = 2 * (c‚ÇÅ + c‚ÇÇ + 3)\nC_gt : 3 < C\nX : ‚Ñù\nX_ge_C : C < X\nŒµ : ‚Ñù\nŒµpos : 0 < Œµ\nŒµ_lt_one : Œµ < 1\nthis_1 : 0 < X\nX_ne_zero : X ‚â† 0\nn_on_X_pos : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí 0 < ‚Üën / X\nsmooth1BddAbove : ‚àÄ (n : ‚Ñï), 0 < n ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) ‚â§ 1\nsmooth1BddBelow : ‚àÄ (n : ‚Ñï), 0 < n ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) ‚â• 0\nsmoothIs1 : ‚àÄ (n : ‚Ñï), 0 < n ‚Üí ‚Üën ‚â§ X * (1 - c‚ÇÅ * Œµ) ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) = 1\nsmoothIs0 : ‚àÄ (n : ‚Ñï), 1 + c‚ÇÇ * Œµ ‚â§ ‚Üën / X ‚Üí Smooth1 SmoothingF Œµ (‚Üën / X) = 0\nF : ‚Ñù ‚Üí ‚Ñù := Smooth1 SmoothingF Œµ\nn‚ÇÄ : ‚Ñï := ‚åäX * (1 - c‚ÇÅ * Œµ)‚åã‚Çä\nn‚ÇÄ_le : ‚Üën‚ÇÄ ‚â§ X * (1 - c‚ÇÅ * Œµ)\nn‚ÇÄ_gt : X * (1 - c‚ÇÅ * Œµ) - 1 ‚â§ ‚Üën‚ÇÄ\nsumŒõ : Summable fun n => vonMangoldt n * F (‚Üën / X)\nsumŒõn‚ÇÄ : ‚àÄ (n‚ÇÄ : ‚Ñï), Summable fun n => vonMangoldt (n + n‚ÇÄ) * F ((‚Üën + ‚Üën‚ÇÄ) / X)\nn‚ÇÅ : ‚Ñï := ‚åàX * (1 + c‚ÇÇ * Œµ)‚åâ‚Çä\nn‚ÇÅ_ge : X * (1 + c‚ÇÇ * Œµ) ‚â§ ‚Üën‚ÇÅ\nn‚ÇÅ_le : ‚Üën‚ÇÅ < X * (1 + c‚ÇÇ * Œµ) + 1\nn‚ÇÅ_ge_n‚ÇÄ : n‚ÇÄ ‚â§ n‚ÇÅ\nn‚ÇÅ_sub_n‚ÇÄ : ‚Üën‚ÇÅ - ‚Üën‚ÇÄ < X * Œµ * (c‚ÇÇ + c‚ÇÅ) + 2\n‚ä¢ ‚àÄ n ‚àà Finset.range (n‚ÇÅ - n‚ÇÄ), ‚ÄñvonMangoldt (n + n‚ÇÄ)‚Äñ ‚â§ Real.log (X * (1 + c‚ÇÇ * Œµ))",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/deda78cba510ad49b82f668e79ee458be78c6a0e/PrimeNumberTheoremAnd/AlphaProofTest3.lean#L158"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-05-07T10:17:07-04:00",
        "inclusion_date": "2025-05-15T23:14:18.311181+00:00"
      },
      "id": "28b9e9557cf304c216e35cdca7dc393a453657ed176aed54275e198b8231be8c"
    },
    {
      "repo": {
        "remote": "https://github.com/emilyriehl/infinity-cosmos",
        "branch": "main",
        "commit": "09886aeee195cf95d6c5522d7d3ea1f66c0decdd",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 66,
        "start_column": 20,
        "end_line": 66,
        "end_column": 25,
        "path": "InfinityCosmos/ForMathlib/InfinityCosmos/Goals.lean"
      },
      "debug_info": {
        "goal": "K‚úù : Functor (Discrete WalkingPair) SSet\n‚ä¢ PreservesLimit K‚úù hoFunctor",
        "url": "https://github.com/emilyriehl/infinity-cosmos/blob/09886aeee195cf95d6c5522d7d3ea1f66c0decdd/InfinityCosmos/ForMathlib/InfinityCosmos/Goals.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "eaaeec08515d",
        "blame_date": "2025-05-27T17:31:10-04:00",
        "inclusion_date": "2025-06-11T03:52:04.456867+00:00"
      },
      "id": "f36538a6b978aedb8c50310e5affb05d328ee4407999ac997c5b37921a6cf65b"
    },
    {
      "repo": {
        "remote": "https://github.com/frenzymath/jixia",
        "branch": "main",
        "commit": "d171b92cfcc808c3fcfa73b4f41c792648c9d48f",
        "lean_version": "v4.16.0"
      },
      "location": {
        "start_line": 82,
        "start_column": 55,
        "end_line": 82,
        "end_column": 60,
        "path": "Example.lean"
      },
      "debug_info": {
        "goal": "Œ± : Type u\n‚ä¢ ¬¨none.IsSome",
        "url": "https://github.com/frenzymath/jixia/blob/d171b92cfcc808c3fcfa73b4f41c792648c9d48f/Example.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "aa8cba96a488",
        "blame_date": "2024-06-20T19:17:07+08:00",
        "inclusion_date": "2025-05-01T23:43:58.830638+00:00"
      },
      "id": "dda6eca1c24f3d179409b6135dea8b03fa033226aef1a1f3e8df49fa215ab69b"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-ja/lean-by-example",
        "branch": "main",
        "commit": "775412b8ceb54c42b4550ebc4f89569b28ca4393",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 31,
        "start_column": 2,
        "end_line": 31,
        "end_column": 7,
        "path": "LeanByExample/Tactic/Sorry.lean"
      },
      "debug_info": {
        "goal": "‚ä¢ one = two",
        "url": "https://github.com/lean-ja/lean-by-example/blob/775412b8ceb54c42b4550ebc4f89569b28ca4393/LeanByExample/Tactic/Sorry.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "a84937a2d49e",
        "blame_date": "2025-06-07T14:00:31+09:00",
        "inclusion_date": "2025-06-08T03:34:57.160346+00:00"
      },
      "id": "05ced422e2db3ae3e83236f8168f677542ae34848c9e0684fcb3ac9ac1175f9b"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "edb386dbe041ce9e19ad76d90c5e7fa14608a181",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 857,
        "start_column": 106,
        "end_line": 857,
        "end_column": 111,
        "path": "PFR/MoreRuzsaDist.lean"
      },
      "debug_info": {
        "goal": "G : Type u_8\nhG : MeasurableSpace G\ninst‚úù¬≤ : AddCommGroup G\ninst‚úù¬π : MeasurableSingletonClass G\ninst‚úù : Countable G\nm : ‚Ñï\nhm : m ‚â• 2\nŒ© : Fin m ‚Üí Type u_9\nhŒ© : (i : Fin m) ‚Üí MeasureSpace (Œ© i)\nX : (i : Fin m) ‚Üí Œ© i ‚Üí G\n‚ä¢ (‚àë j, ‚àë k, if j = k then 0 else d[X j # -X k]) ‚â§ ‚Üëm * (‚Üëm - 1) * @multiDist G hG inst‚úù¬≤ m Œ© hŒ© X",
        "url": "https://github.com/teorth/pfr/blob/edb386dbe041ce9e19ad76d90c5e7fa14608a181/PFR/MoreRuzsaDist.lean#L857"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-02T00:15:47-07:00",
        "inclusion_date": "2025-05-03T00:49:01.282024+00:00"
      },
      "id": "2be0150aa78fedfb57d79b8a6097182c5778adf8bbc131f71c5c788fcd941297"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "fae_PR_IsDiscrete",
        "commit": "021e880306684ec119d45c14dffe71109c4d80a3",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 175,
        "start_column": 2,
        "end_line": 175,
        "end_column": 7,
        "path": "Mathlib/Algebra/GroupWithZero/Range.lean"
      },
      "debug_info": {
        "goal": "case intro\nA : Type u_1\nB : Type u_2\nF : Type u_3\ninst‚úù‚Å¥ : FunLike F A B\nf : F\ninst‚úù¬≥ : MonoidWithZero A\ninst‚úù¬≤ : Nontrivial A\ninst‚úù¬π : CommGroupWithZero B\ninst‚úù : MonoidWithZeroHomClass F A B\nh : ‚àÄ {a : A}, f a ‚â† 0 ‚Üî a ‚â† 0\nb : BÀ£\na : A\nha : f a = ‚Üëb\n‚ä¢ a ‚àà nonZeroDivisors A",
        "url": "https://github.com/leanprover-community/mathlib4/blob/021e880306684ec119d45c14dffe71109c4d80a3/Mathlib/Algebra/GroupWithZero/Range.lean#L175"
      },
      "metadata": {
        "blame_email_hash": "0a3759cf16cc",
        "blame_date": "2025-06-11T19:00:22+02:00",
        "inclusion_date": "2025-06-12T03:10:42.562420+00:00"
      },
      "id": "218dafdfa78f1c2f99599fb25dcf4bc3296be613efea9661c9664d77ed45a2e2"
    },
    {
      "repo": {
        "remote": "https://github.com/PatrickMassot/GlimpseOfLean",
        "branch": "master",
        "commit": "984733b141fe69311aa9fbbaf86b538e85b38a7f",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 122,
        "start_column": 4,
        "end_line": 122,
        "end_column": 9,
        "path": "GlimpseOfLean/Exercises/Topics/Probability.lean"
      },
      "debug_info": {
        "goal": "case pos\nŒ© : Type\ninst‚úù¬π : MeasureSpace Œ©\ninst‚úù : IsProbabilityMeasure volume\nA B : Set Œ©\nhB : volume B ‚â† 0\nh : volume A = 0\n‚ä¢ condProb Œ© inst‚úù¬π A B = volume A * condProb Œ© inst‚úù¬π B A / volume B",
        "url": "https://github.com/PatrickMassot/GlimpseOfLean/blob/984733b141fe69311aa9fbbaf86b538e85b38a7f/GlimpseOfLean/Exercises/Topics/Probability.lean#L122"
      },
      "metadata": {
        "blame_email_hash": "c28576c1d1dd",
        "blame_date": "2025-04-20T19:47:14+02:00",
        "inclusion_date": "2025-05-20T03:05:36.205834+00:00"
      },
      "id": "64063a45f9760cef64c5231abb4e46e10043bc74766a4e12fd78020c3b6ac0cb"
    },
    {
      "repo": {
        "remote": "https://github.com/nomeata/loogle",
        "branch": "master",
        "commit": "b340a5b73a68fd54d624ac1f9c025c11f638bb53",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7,
        "path": "Tests.lean"
      },
      "debug_info": {
        "goal": "n m : Nat\n‚ä¢ List.replicate (2 * n) () = List.replicate n () ++ List.replicate n ()",
        "url": "https://github.com/nomeata/loogle/blob/b340a5b73a68fd54d624ac1f9c025c11f638bb53/Tests.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "1e9dd229978a",
        "blame_date": "2023-11-11T14:02:18+01:00",
        "inclusion_date": "2025-04-14T00:17:19.239440+00:00"
      },
      "id": "568abb06ec8e089d6c8f26eee9d0f75ef985ded6e40ac5c66ad644307715bf6d"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "main",
        "commit": "344a2e4f1e9e492d9f303185b32968f62b92202c",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 1763,
        "start_column": 8,
        "end_line": 1763,
        "end_column": 13,
        "path": "ArkLib/Data/FieldTheory/BinaryTowerField/Impl.lean"
      },
      "debug_info": {
        "goal": "case neg\nk : ‚Ñï\nrecArg : (m : ‚Ñï) ‚Üí m < k ‚Üí ConcreteDefinition.ConcreteBTFStepResult m\na : ConcreteDefinition.ConcreteBinaryTower k\nh : a ‚â† 0\nh_k_zero : ¬¨k = 0\nh_a_zero : ¬¨a = 0\nh_a_one : ¬¨a = 1\nh_k_gt_0 : k > 0\nrecArgPrevLevel : ConcreteDefinition.ConcreteBTFStepResult (k - 1)\nsplit_a : ConcreteDefinition.ConcreteBinaryTower (k - 1) √ó ConcreteDefinition.ConcreteBinaryTower (k - 1) :=\n  ConcreteDefinition.split k h_k_gt_0 a\na‚ÇÅ : ConcreteDefinition.ConcreteBinaryTower (k - 1) := split_a.1\na‚ÇÄ : ConcreteDefinition.ConcreteBinaryTower (k - 1) := split_a.2\nh_a_split : ConcreteDefinition.split k h_k_gt_0 a = (a‚ÇÅ, a‚ÇÄ)\nh_a‚ÇÅ : (ConcreteDefinition.split k h_k_gt_0 a).1 = a‚ÇÅ\nh_a‚ÇÄ : (ConcreteDefinition.split k h_k_gt_0 a).2 = a‚ÇÄ\n‚ä¢ ConcreteDefinition.concrete_mul k a\n      (ConcreteDefinition.join k ‚ãØ\n        (ConcreteDefinition.concrete_mul (k - 1)\n          (ConcreteDefinition.concrete_inv (k - 1)\n            (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n              (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n              (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1))\n              (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1)) (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÄ a‚ÇÄ)\n                (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÄ\n                  (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ (ConcreteDefinition.Z (k - 1)))))\n              (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ a‚ÇÅ)))\n          a‚ÇÅ)\n        (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n          (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1))\n          (ConcreteDefinition.concrete_mul (k - 1)\n            (ConcreteDefinition.concrete_inv (k - 1)\n              (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1))\n                (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                  (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                  (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1))\n                  (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÄ a‚ÇÄ)\n                  (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÄ\n                    (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ (ConcreteDefinition.Z (k - 1)))))\n                (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ a‚ÇÅ)))\n            a‚ÇÄ)\n          (ConcreteDefinition.concrete_mul (k - 1)\n            (ConcreteDefinition.concrete_inv (k - 1)\n              (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1))\n                (@HAdd.hAdd (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                  (ConcreteDefinition.ConcreteBinaryTower (k - 1)) (ConcreteDefinition.ConcreteBinaryTower (k - 1))\n                  (ConcreteDefinition.instHAddConcreteBinaryTower (k - 1))\n                  (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÄ a‚ÇÄ)\n                  (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÄ\n                    (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ (ConcreteDefinition.Z (k - 1)))))\n                (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ a‚ÇÅ)))\n            (ConcreteDefinition.concrete_mul (k - 1) a‚ÇÅ (ConcreteDefinition.Z (k - 1)))))) =\n    ConcreteDefinition.one k",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/344a2e4f1e9e492d9f303185b32968f62b92202c/ArkLib/Data/FieldTheory/BinaryTowerField/Impl.lean#L1763"
      },
      "metadata": {
        "blame_email_hash": "17f52712dc49",
        "blame_date": "2025-06-11T16:29:27+07:00",
        "inclusion_date": "2025-06-12T03:49:08.661504+00:00"
      },
      "id": "26b5a612a6edf5366395cfe94980a07e76efa577e45d9e1eaa0e42f5bbb8595d"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "jnlindsay/feat/restricted-Lorentz-group-equal-to-identity-component",
        "commit": "b4a420deef68762a68898a4245f54fb1992b6f4c",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 86,
        "start_column": 2,
        "end_line": 86,
        "end_column": 7,
        "path": "PhysLean/Relativity/Lorentz/Group/Restricted.lean"
      },
      "debug_info": {
        "goal": "d : ‚Ñï\n‚ä¢ _root_.IsConnected ‚Üë(LorentzGroup.restricted d)",
        "url": "https://github.com/HEPLean/PhysLean/blob/b4a420deef68762a68898a4245f54fb1992b6f4c/PhysLean/Relativity/Lorentz/Group/Restricted.lean#L86"
      },
      "metadata": {
        "blame_email_hash": "f5ab4f28bed3",
        "blame_date": "2025-05-13T20:30:02+10:00",
        "inclusion_date": "2025-05-13T23:18:43.440253+00:00"
      },
      "id": "56d416332db27680a625dc9e3fcef645b48675ece9e1ee3f47398a3dcf1da58f"
    },
    {
      "repo": {
        "remote": "https://github.com/ufmg-smite/lean-smt",
        "branch": "main",
        "commit": "98b12d984f8c21a99abfb8b69f12fe243beaf7c6",
        "lean_version": "v4.16.0"
      },
      "location": {
        "start_line": 626,
        "start_column": 2,
        "end_line": 626,
        "end_column": 7,
        "path": "Smt/Reconstruct/Rat/Core.lean"
      },
      "debug_info": {
        "goal": "a b : Rat\n‚ä¢ 0 ‚â§ a ‚Üí 0 ‚â§ b ‚Üí 0 ‚â§ a * b",
        "url": "https://github.com/ufmg-smite/lean-smt/blob/98b12d984f8c21a99abfb8b69f12fe243beaf7c6/Smt/Reconstruct/Rat/Core.lean#L626"
      },
      "metadata": {
        "blame_email_hash": "a29bc6f92c6c",
        "blame_date": "2025-05-03T21:48:26-07:00",
        "inclusion_date": "2025-05-05T00:05:16.483689+00:00"
      },
      "id": "a9b895e369e7d35f6fc14cac0d071cf8fec58988fd8e694faf7ebffe81035ae4"
    },
    {
      "repo": {
        "remote": "https://github.com/yangky11/miniF2F-lean4",
        "branch": "main",
        "commit": "76ab47e70c68d3451e34efd635f61315c6c63b28",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 590,
        "start_column": 0,
        "end_line": 590,
        "end_column": 5,
        "path": "MiniF2F/Test.lean"
      },
      "debug_info": {
        "goal": "f : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï\ng : ‚Ñï ‚Üí ‚Ñï\nh‚ÇÄ : ‚àÄ (y : ‚Ñï), f 0 y = y + 1\nh‚ÇÅ : ‚àÄ (x : ‚Ñï), f (x + 1) 0 = f x 1\nh‚ÇÇ : ‚àÄ (x y : ‚Ñï), f (x + 1) (y + 1) = f x (f (x + 1) y)\nh‚ÇÉ : g 0 = 2\nh‚ÇÑ : ‚àÄ (n : ‚Ñï), g (n + 1) = 2 ^ g n\n‚ä¢ f 4 1981 = g 1983 - 3",
        "url": "https://github.com/yangky11/miniF2F-lean4/blob/76ab47e70c68d3451e34efd635f61315c6c63b28/MiniF2F/Test.lean#L590"
      },
      "metadata": {
        "blame_email_hash": "e7ac978c7a81",
        "blame_date": "2025-04-24T19:32:39+08:00",
        "inclusion_date": "2025-06-05T03:31:37.797708+00:00"
      },
      "id": "268f414da0b744ca1ebc257b947828a548eb646295ed9d41d111c6434871fc4b"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 13,
        "start_column": 82,
        "end_line": 13,
        "end_column": 87,
        "path": "examples/FloatTest.lean"
      },
      "debug_info": {
        "goal": "x‚úù¬≥ x‚úù¬≤ x‚úù¬π x‚úù : PUnit.{1}\n‚ä¢ { data := #[1.0, 2.0, 3.0, 4.0, 3.0] }.toByteArray.size % 8 = 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/examples/FloatTest.lean#L13"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2025-01-07T15:43:19-05:00",
        "inclusion_date": "2025-05-29T03:10:06.182872+00:00"
      },
      "id": "e93dd22e7de6d89815d8ae7f4892b134cc27172d51d5b4fb7baa4430a35c18f3"
    },
    {
      "repo": {
        "remote": "https://github.com/cmu-l3/llmlean",
        "branch": "kimina-pr",
        "commit": "126a6b2af37727c4d81bb49f6af6b354a380145e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "start_line": 5,
        "start_column": 2,
        "end_line": 5,
        "end_column": 7,
        "path": "LLMleanTest/Examples.lean"
      },
      "debug_info": {
        "goal": "Œ± : Type u_1\nr s t : Set Œ±\n‚ä¢ r ‚äÜ s ‚Üí s ‚äÜ t ‚Üí r ‚äÜ t",
        "url": "https://github.com/cmu-l3/llmlean/blob/126a6b2af37727c4d81bb49f6af6b354a380145e/LLMleanTest/Examples.lean#L5"
      },
      "metadata": {
        "blame_email_hash": "3ab0971ac342",
        "blame_date": "2025-06-10T09:47:05-04:00",
        "inclusion_date": "2025-06-11T03:39:01.065377+00:00"
      },
      "id": "591efd953e6e3ffb6858efdb2810638629423c24297050ad15780e5a796f12b9"
    },
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "fa63371f54d5353ab86e7e2b97473832c417e5ba",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7,
        "path": "Compfiles/Imo2020P3.lean"
      },
      "debug_info": {
        "goal": "n : ‚Ñï\nc : Fin (4 * n) ‚Üí Fin n\nh : ‚àÄ (i : Fin n), #{j | c j = i} = 4\n‚ä¢ ‚àÉ S, ‚àë i ‚àà S, (‚Üëi + 1) = ‚àë i ‚àà S·∂ú, (‚Üëi + 1) ‚àß ‚àÄ (i : Fin n), #({j ‚àà S | c j = i}) = 2",
        "url": "https://github.com/dwrensha/compfiles/blob/fa63371f54d5353ab86e7e2b97473832c417e5ba/Compfiles/Imo2020P3.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "acdd9d7e744e",
        "blame_date": "2025-04-08T13:09:24-04:00",
        "inclusion_date": "2025-04-12T23:25:20.561445+00:00"
      },
      "id": "70eb82b882388275af62794a7d8761678aee0776c17f603eefa6183ecd229e75"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "master",
        "commit": "5d0eb4e51de098b32e1623f00fe8c84dff24a004",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "start_line": 194,
        "start_column": 4,
        "end_line": 194,
        "end_column": 9,
        "path": "Foundation/Modal/MaximalConsistentSet.lean"
      },
      "debug_info": {
        "goal": "case inr\nŒ± : Type u_1\nS : Type u_2\ninst‚úù¬≥ : Entailment (Formula Œ±) S\nùì¢ : S\ninst‚úù¬≤ : DecidableEq Œ±\nT : FormulaSet Œ±\ninst‚úù¬π : Entailment.Cl ùì¢\nœÜ : Formula Œ±\ninst‚úù : Necessitation ùì¢\nT_consis : Consistent ùì¢ T\nh : ‚àº‚ñ°œÜ ‚àà T\nhŒì : ‚Üë{‚àºœÜ} ‚äÜ {‚àºœÜ}\n‚ä¢ ‚Üë{‚àºœÜ} *‚ä¨[ùì¢] ‚ä•",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5d0eb4e51de098b32e1623f00fe8c84dff24a004/Foundation/Modal/MaximalConsistentSet.lean#L194"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-05-12T12:29:45+09:00",
        "inclusion_date": "2025-05-15T23:27:40.059657+00:00"
      },
      "id": "ec60fa49e5ecd09d8454c8d07337a05aa1b6ff1ceb384dfed9bd0c12e9669f8b"
    },
    {
      "repo": {
        "remote": "https://github.com/fpvandoorn/carleson",
        "branch": "master",
        "commit": "7f3aec87f4bc813888feceb76a9751e397c89034",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 335,
        "start_column": 6,
        "end_line": 335,
        "end_column": 11,
        "path": "Carleson/Antichain/Basic.lean"
      },
      "debug_info": {
        "goal": "case h.e'_4.h.e'_5\nX : Type u_1\na : ‚Ñï\nq : ‚Ñù\nK : X ‚Üí X ‚Üí ‚ÑÇ\nœÉ‚ÇÅ œÉ‚ÇÇ : X ‚Üí ‚Ñ§\nF G : Set X\ninst‚úù¬≤ : MetricSpace X\ninst‚úù¬π : ProofData a q K œÉ‚ÇÅ œÉ‚ÇÇ F G\ninst‚úù : TileStructure Q (defaultD a) (defaultŒ∫ a) (defaultS X) (cancelPt X)\nùîÑ : Finset (ùîì X)\nhùîÑ : IsAntichain (fun x1 x2 => x1 ‚â§ x2) ‚ÜëùîÑ\nf : X ‚Üí ‚ÑÇ\nhf : ‚àÄ (x : X), ‚Äñf x‚Äñ ‚â§ F.indicator 1 x\nhfm : Measurable f\np‚ÇÅ : NNReal := 2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2)\nhp‚ÇÅ : p‚ÇÅ = 2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2)\naux : 0 < 3 * (2 * nnq X / (nnq X + 1)) - 2\nhp‚ÇÅ_ge : 1 ‚â§ p‚ÇÅ\nhp‚ÇÅ_lt : p‚ÇÅ < 2\nhf1 : AEStronglyMeasurable f volume\nhf_top : eLpNorm f 2 volume < ‚ä§\nthis :\n  HasStrongType (fun f x => maximalFunction volume (‚ÜëùîÑ) ùî† (fun ùî≠ => 8 * ‚Üë(defaultD a) ^ ùî∞ ùî≠) (‚Üëp‚ÇÅ) f x) 2 2 volume\n    volume ‚Üë(C2_0_6 (2 ^ a) p‚ÇÅ 2)\nhh :\n  eLpNorm\n      (fun x2 =>\n        (maximalFunction volume (‚ÜëùîÑ) ùî† (fun ùî≠ => 8 * ‚Üë(defaultD a) ^ ùî∞ ùî≠)\n            (‚Üë(2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2))) f x2).toReal)\n      2 volume ‚â§\n    ‚Üë(CMB (2 ^ a) (2 / (2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2))) ^\n          (‚Üë(2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2)))‚Åª¬π) *\n      eLpNorm f 2 volume\n‚ä¢ ‚Üë(2 ^ (2 * a)) * (3 * (‚Üë(2 * nnq X) / ‚Üë(nnq X + 1)) - 2) / (2 * (‚Üë(2 * nnq X) / ‚Üë(nnq X + 1)) - 2) =\n    ‚Üë(CMB (‚Üë(2 ^ a)) (2 / (2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2))) ^\n        ‚Üë(2 * (2 * nnq X / (nnq X + 1)) / (3 * (2 * nnq X / (nnq X + 1)) - 2))‚Åª¬π)",
        "url": "https://github.com/fpvandoorn/carleson/blob/7f3aec87f4bc813888feceb76a9751e397c89034/Carleson/Antichain/Basic.lean#L335"
      },
      "metadata": {
        "blame_email_hash": "44a80a4a9c95",
        "blame_date": "2025-06-04T11:19:38+02:00",
        "inclusion_date": "2025-06-12T03:25:58.623874+00:00"
      },
      "id": "f42b9db855ce9a48e791f06c914a58c0711a7838e916a9b4753f56db925e9b11"
    },
    {
      "repo": {
        "remote": "https://github.com/ImperialCollegeLondon/FLT",
        "branch": "auto-update-lean/patch",
        "commit": "a7c7ddfb1ac681c3e3f1d050c84a3d4da8cb62f9",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 97,
        "start_column": 2,
        "end_line": 97,
        "end_column": 7,
        "path": "FLT/HaarMeasure/HaarChar/AdeleRing.lean"
      },
      "debug_info": {
        "goal": "K : Type u_1\ninst‚úù‚Å∏ : Field K\ninst‚úù‚Å∑ : NumberField K\nB : Type u_4\ninst‚úù‚Å∂ : Ring B\ninst‚úù‚Åµ : Algebra K B\ninst‚úù‚Å¥ : FiniteDimensional K B\ninst‚úù¬≥ : MeasurableSpace (TensorProduct K B (AdeleRing (RingOfIntegers K) K))\ninst‚úù¬≤ : BorelSpace (TensorProduct K B (AdeleRing (RingOfIntegers K) K))\ninst‚úù¬π : IsSimpleRing B\ninst‚úù : Algebra.IsCentral K B\nu : (TensorProduct K B (AdeleRing (RingOfIntegers K) K))À£\n‚ä¢ addEquivAddHaarChar (ContinuousAddEquiv.mulLeft u) = addEquivAddHaarChar (ContinuousAddEquiv.mulRight u)",
        "url": "https://github.com/ImperialCollegeLondon/FLT/blob/a7c7ddfb1ac681c3e3f1d050c84a3d4da8cb62f9/FLT/HaarMeasure/HaarChar/AdeleRing.lean#L97"
      },
      "metadata": {
        "blame_email_hash": "c7989443bd81",
        "blame_date": "2025-06-07T23:01:07+01:00",
        "inclusion_date": "2025-06-09T04:24:23.505775+00:00"
      },
      "id": "698142f6e8f2eb03799ffebbd7081d4f53cfb5fbc54420471d10da55a199415e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "43be1bece7ff58a0168022c39aa223b8e730eca5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "start_line": 20,
        "start_column": 48,
        "end_line": 20,
        "end_column": 53,
        "path": "Duper/Tests/test_continuity.lean"
      },
      "debug_info": {
        "goal": "a : Real\n‚ä¢ lt zero one",
        "url": "https://github.com/leanprover-community/duper/blob/43be1bece7ff58a0168022c39aa223b8e730eca5/Duper/Tests/test_continuity.lean#L20"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-05-08T23:57:49.858741+00:00"
      },
      "id": "8c1874bf12cff9affa2b3b733c13b2c8770b167d348c91f3c51a3dce6cf572bc"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "main",
        "commit": "5e6a77528fb6cace1f0adf2563e4e1bc1da541ae",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 31,
        "start_column": 33,
        "end_line": 31,
        "end_column": 38,
        "path": "BatteriesTest/lint_unreachableTactic.lean"
      },
      "debug_info": {
        "goal": "aa : Nat\n‚ä¢ aa = 0 ‚Üí t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/5e6a77528fb6cace1f0adf2563e4e1bc1da541ae/BatteriesTest/lint_unreachableTactic.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-06-12T03:48:30.363554+00:00"
      },
      "id": "f343f0276483055ae7cfd5f97da4f5da4600ea2fd6faf3a0e2d3b15e62382a61"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/aesop",
        "branch": "master",
        "commit": "c3a19fa17982c5c1413fea335f371869b8b12e1d",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "start_line": 31,
        "start_column": 2,
        "end_line": 31,
        "end_column": 7,
        "path": "AesopTest/205.lean"
      },
      "debug_info": {
        "goal": "Œ± : Type u_1\nx y a b : Œ±\nh‚ÇÇ : @R Œ± x a\nh‚ÇÉ : @R Œ± y b\nfwd : @R Œ± b y\nfwd_1 : @R Œ± a x\nfwd_2 : @R Œ± b b\nfwd_3 : @R Œ± y y\nfwd_4 : @R Œ± a a\nfwd_5 : @R Œ± x x\n‚ä¢ False",
        "url": "https://github.com/leanprover-community/aesop/blob/c3a19fa17982c5c1413fea335f371869b8b12e1d/AesopTest/205.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "555bc3b21621",
        "blame_date": "2025-04-29T23:07:06+02:00",
        "inclusion_date": "2025-06-05T03:19:47.452353+00:00"
      },
      "id": "33ff6aba76ff70e6710bb1a635c1d569db9b0c8b49463f6c1db114d765e1f707"
    }
  ]
}
