{
  "documentation": "deduplicated list of sorries, for each unique goal string the most recent inclusion date is chosen",
  "sorries": [
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "54e2692f53004e900064c6f6e8e5a38b2754b0ad",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "Compfiles/Imo1988P3.lean",
        "start_line": 38,
        "start_column": 2,
        "end_line": 38,
        "end_column": 7
      },
      "debug_info": {
        "goal": "f : \u2115+ \u2192 \u2115+\nh\u2080 : f 1 = 1\nh\u2081 : f 3 = 3\nh\u2082 : \u2200 (n : \u2115+), f (2 * n) = f n\nh\u2083 : \u2200 (n : \u2115+), f (4 * n + 1) + f n = 2 * f (2 * n + 1)\nh\u2084 : \u2200 (n : \u2115+), f (4 * n + 3) + 2 * f n = 3 * f (2 * n + 1)\nA : Finset \u2191{n | n \u2264 1988 \u2227 f n = n}\n\u22a2 A.card = Imo1988P3.solution",
        "url": "https://github.com/dwrensha/compfiles/blob/54e2692f53004e900064c6f6e8e5a38b2754b0ad/Compfiles/Imo1988P3.lean#L38"
      },
      "metadata": {
        "blame_email_hash": "acdd9d7e744e",
        "blame_date": "2025-09-17T12:37:38-04:00",
        "inclusion_date": "2025-09-19T03:11:14.409941+00:00"
      },
      "id": "d6745befdf5fbb8ce111728e06e7551a46119aef55e0795b5fc835374dba178d"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "generalized-trace",
        "commit": "5c479c65ad77d0b6ad82e6622abd2ad85e349c7d",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean",
        "start_line": 31,
        "start_column": 6,
        "end_line": 31,
        "end_column": 11
      },
      "debug_info": {
        "goal": "case mpr.intro.intro.intro.intro.intro.intro.refine_2\n\u03c6 : Formula \u2115\n\u03c6_letterless : \u03c6.letterless\nM : Model\nr : M.World\nw\u271d\u00b9 : M.IsTree r\nw\u271d : Fintype M.World\nw : M.World\nh : \u00acw \u22a7 \u03c6\n\u22a2 (M\u21bew).finHeight = Frame.World.finHeight w",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5c479c65ad77d0b6ad82e6622abd2ad85e349c7d/Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-09-16T20:46:24+09:00",
        "inclusion_date": "2025-09-17T03:36:03.416511+00:00"
      },
      "id": "3524f6c7909a47567132749f0039d75a4b4fe76306d56399c28e81447ddb9446"
    },
    {
      "repo": {
        "remote": "https://github.com/fpvandoorn/carleson",
        "branch": "master",
        "commit": "218b6615448da46a5c14a086fa57c197a0a8131a",
        "lean_version": "v4.22.0-rc2"
      },
      "location": {
        "path": "Carleson/Antichain/AntichainTileCount.lean",
        "start_line": 455,
        "start_column": 56,
        "end_line": 455,
        "end_column": 61
      },
      "debug_info": {
        "goal": "X : Type u_1\na : \u2115\nq : \u211d\nK : X \u2192 X \u2192 \u2102\n\u03c3\u2081 \u03c3\u2082 : X \u2192 \u2124\nF G : Set X\ninst\u271d\u00b2 : MetricSpace X\ninst\u271d\u00b9 : ProofData a q K \u03c3\u2081 \u03c3\u2082 F G\ninst\u271d : TileStructure Q (defaultD a) (default\u03ba a) (defaultS X) (cancelPt X)\n\ud835\udd04 : Finset (\ud835\udd13 X)\n\u03d1 : \u0398 X\nN : \u2115\nL : Grid X\nhL : L \u2208 @Antichain.\ud835\udcdb' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N\nt : Finset (\ud835\udd13 X) := {p | \ud835\udcd8 p = L}\n\u22a2 \u2211 p \u2208 @Antichain.\ud835\udd04' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N \u2229 t, volume (E p \u2229 G \u2229 \u2191L) +\n      \u2211 p \u2208 @Antichain.\ud835\udd04' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N \\ t, volume (E p \u2229 G \u2229 \u2191L) \u2264\n    \u2211 p \u2208 @Antichain.\ud835\udd04' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N \u2229 t, volume (E p \u2229 G \u2229 \u2191L) +\n      \u2211 p \u2208 @Antichain.\ud835\udd04' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N \\ t, volume (E p \u2229 G \u2229 \u2191L)",
        "url": "https://github.com/fpvandoorn/carleson/blob/218b6615448da46a5c14a086fa57c197a0a8131a/Carleson/Antichain/AntichainTileCount.lean#L455"
      },
      "metadata": {
        "blame_email_hash": "44a80a4a9c95",
        "blame_date": "2025-07-10T17:55:50+02:00",
        "inclusion_date": "2025-07-11T23:48:31.060328+00:00"
      },
      "id": "8ba650ea6577ef47250f9aa9d829155845a85fd7be54232cdfdd0a40e3d0566d"
    },
    {
      "repo": {
        "remote": "https://github.com/ImperialCollegeLondon/FLT",
        "branch": "kbuzzard-hardly-ramified",
        "commit": "cca256f8a9c63e51a83aa74a8f07c671e40f21f5",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FLT/GaloisRepresentation/HardlyRamified.lean",
        "start_line": 113,
        "start_column": 2,
        "end_line": 113,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u2113 : \u2115\nh\u2113 : Nat.Prime \u2113\nhp : Odd \u2113\nR : Type u_1\ninst\u271d\u2077 : CommRing R\ninst\u271d\u2076 : TopologicalSpace R\ninst\u271d\u2075 : IsTopologicalRing R\ninst\u271d\u2074 : IsLocalRing R\nhl : \u2191\u2113 \u2208 IsLocalRing.maximalIdeal R\nV : Type u_2\ninst\u271d\u00b3 : AddCommGroup V\ninst\u271d\u00b2 : Module R V\ninst\u271d\u00b9 : Module.Finite R V\ninst\u271d : Module.Free R V\nhdim : Module.rank R V = 2\n\u03c1 : GaloisRep \u211a R V\n\u03c1\u2082 : GaloisRep (HeightOneSpectrum.adicCompletion \u211a (Nat.Prime.toHeightOneSpectrumRingOfIntegersRat 2 Nat.prime_two)) R\n  V :=\n  \u03c1.toLocal (Nat.Prime.toHeightOneSpectrumRingOfIntegersRat 2 Nat.prime_two)\n\u22a2 False",
        "url": "https://github.com/ImperialCollegeLondon/FLT/blob/cca256f8a9c63e51a83aa74a8f07c671e40f21f5/FLT/GaloisRepresentation/HardlyRamified.lean#L113"
      },
      "metadata": {
        "blame_email_hash": "c7989443bd81",
        "blame_date": "2025-09-10T19:11:20+01:00",
        "inclusion_date": "2025-09-13T04:26:41.834573+00:00"
      },
      "id": "f6253bfaf46d7c4259a22493f250c5ddaea18eb5819da6106df2ea81e579336e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/quote4",
        "branch": "master",
        "commit": "345a958916d27982d4ecb4500fba0ebb21096651",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "examples/introQ.lean",
        "start_line": 16,
        "start_column": 18,
        "end_line": 16,
        "end_column": 23
      },
      "debug_info": {
        "goal": "\u00ab$P\u00bb : \u2200 {n : Nat}, n = 1\n$fst\u271d : Nat\n\u00ab$m\u00bb : $fst\u271d = 1\n\u22a2 $fst\u271d = 1",
        "url": "https://github.com/leanprover-community/quote4/blob/345a958916d27982d4ecb4500fba0ebb21096651/examples/introQ.lean#L16"
      },
      "metadata": {
        "blame_email_hash": "1c4ac4603b04",
        "blame_date": "2023-07-14T18:25:43-07:00",
        "inclusion_date": "2025-09-16T04:18:21.447068+00:00"
      },
      "id": "a0a7022a4ffc23a72dc4c8a32dcf68f45c2ff3d37220f078ca23e442a92aa096"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "hammer",
        "commit": "df5422589eaaeba41dd92db86155b35961347905",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "Duper/Tests/test_continuity.lean",
        "start_line": 18,
        "start_column": 50,
        "end_line": 18,
        "end_column": 55
      },
      "debug_info": {
        "goal": "a : Real\n\u22a2 dist a a = zero",
        "url": "https://github.com/leanprover-community/duper/blob/df5422589eaaeba41dd92db86155b35961347905/Duper/Tests/test_continuity.lean#L18"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-09-15T04:46:20.716201+00:00"
      },
      "id": "8c4b8b3cb3e1c09927d600fe14999d971c0c995a4759388a35fbceaabe3139e6"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "c3553c06247678bde54544e88d21636d16cd0579",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 24,
        "start_column": 2,
        "end_line": 25,
        "end_column": 5
      },
      "debug_info": {
        "goal": "\u22a2 1 = 1",
        "url": "https://github.com/leanprover-community/batteries/blob/c3553c06247678bde54544e88d21636d16cd0579/BatteriesTest/lint_unreachableTactic.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-09-19T03:33:33.814695+00:00"
      },
      "id": "ded133834c8a1095d05267cda7e94d57d137c48fa33f52b3fe593efb8c740ce1"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/aesop",
        "branch": "master",
        "commit": "d279b56adead908de8bd086ea46b82895cf4f12c",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "AesopTest/205.lean",
        "start_line": 31,
        "start_column": 2,
        "end_line": 31,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nx y a b : \u03b1\nh\u2082 : R x a\nh\u2083 : R y b\nfwd : R b y\nfwd_1 : R a x\nfwd_2 : R b b\nfwd_3 : R y y\nfwd_4 : R a a\nfwd_5 : R x x\n\u22a2 False",
        "url": "https://github.com/leanprover-community/aesop/blob/d279b56adead908de8bd086ea46b82895cf4f12c/AesopTest/205.lean#L31"
      },
      "metadata": {
        "blame_email_hash": "555bc3b21621",
        "blame_date": "2025-04-29T23:07:06+02:00",
        "inclusion_date": "2025-04-30T23:33:22.583043+00:00"
      },
      "id": "2ed3ed49a5906744d12cce67d1175d136b7f420f696980938c3b66e07db8e8de"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/LeanCamCombi",
        "branch": "master",
        "commit": "5df79658756ef6d112f2464eec3aece31e35cc83",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "LeanCamCombi/ExtrProbCombi/BinomialRandomGraph.lean",
        "start_line": 46,
        "start_column": 75,
        "end_line": 46,
        "end_column": 80
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\n\u03a9 : Type u_2\ninst\u271d : MeasurableSpace \u03a9\nG : \u03a9 \u2192 SimpleGraph \u03b1\np : \u211d\u22650\n\u03bc : Measure \u03a9\nhG : IsBinomialRandomGraph G p \u03bc\n\u22a2 iIndepFun (fun e \u03c9 => e \u2208 (G \u03c9).edgeSet) \u03bc",
        "url": "https://github.com/YaelDillies/LeanCamCombi/blob/5df79658756ef6d112f2464eec3aece31e35cc83/LeanCamCombi/ExtrProbCombi/BinomialRandomGraph.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-06T17:45:28+00:00",
        "inclusion_date": "2025-04-18T00:01:05.296811+00:00"
      },
      "id": "46b51bb59c19a979862a472d54fe0443db1e06fd4900df7d9725c480a4a05693"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "AK_work",
        "commit": "f4441d7327caa75ae7879ecfda33fc60ab0cf17e",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 7245,
        "start_column": 65,
        "end_line": 7245,
        "end_column": 70
      },
      "debug_info": {
        "goal": "\u03bd : \u211d \u2192 \u211d\n\u03bd_supp : support \u03bd \u2286 Icc (1 / 2) 2\nContDiff1\u03bd : ContDiff \u211d 1 \u03bd\n\u03bd_nonneg : \u2200 x > 0, 0 \u2264 \u03bd x\n\u03bd_massOne : \u222b (x : \u211d) in Ioi 0, \u03bd x / x = 1\nc_close : \u211d\nc_close_pos : c_close > 0\nh_close :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 (\u03b5 : \u211d),\n        0 < \u03b5 \u2192 \u03b5 < 1 \u2192 2 < X * \u03b5 \u2192 \u2016SmoothedChebyshev \u03bd \u03b5 X - \u2191(ChebyshevPsi X)\u2016 \u2264 c_close * \u03b5 * X * Real.log X\n\u03b5_main C_main : \u211d\n\u03b5_main_pos : 0 < \u03b5_main\nC_main_pos : 0 < C_main\nh_main : \u2200 \u03b5 \u2208 Ioo 0 \u03b5_main, \u2016MellinTransform (fun x => \u2191(Smooth1 \u03bd \u03b5 x)) 1 - 1\u2016 \u2264 C_main * \u03b5\nA C_bnd : \u211d\nC_bnd_pos : 0 < C_bnd\nA_in_Ioc : A \u2208 Ioc 0 (1 / 2)\nzeta_bnd : LogDerivZetaHasBound A C_bnd\nholo1 :\n  \u2200 (T : \u211d),\n    3 \u2264 T \u2192\n      HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (Icc (1 - A / Real.log T ^ 9) 2 \u00d7\u2102 Icc (-T) T \\ {1})\n\u03c3\u2082' : \u211d\n\u03c3\u2082 : \u211d := max \u03c3\u2082' (1 / 2)\n\u03c3\u2082_pos : 0 < \u03c3\u2082\n\u03c3\u2082_lt_one : \u03c3\u2082 < 1\nholo2 : HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (uIcc \u03c3\u2082 2 \u00d7\u2102 uIcc (-3) 3 \\ {1})\nc\u2081 : \u211d\nc\u2081pos : c\u2081 > 0\nhc\u2081 : \u2200 (\u03b5 : \u211d), 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2081 \u03bd \u03b5 X T\u2016 \u2264 c\u2081 * X * Real.log X / (\u03b5 * T)\nc\u2082 : \u211d\nc\u2082pos : 0 < c\u2082\nhc\u2082 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2082 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2082 * X / (\u03b5 * T)\nc\u2083 : \u211d\nc\u2083pos : 0 < c\u2083\nhc\u2083 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2083 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2083 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2085 : \u211d\nc\u2085pos : 0 < c\u2085\nhc\u2085 : \u2200 (X : \u211d), 3 < X \u2192 \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2016I\u2085 \u03bd \u03b5 X \u03c3\u2082\u2016 \u2264 c\u2085 * X ^ \u03c3\u2082 / \u03b5\nc\u2087 : \u211d\nc\u2087pos : 0 < c\u2087\nhc\u2087 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2087 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2087 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2088 : \u211d\nc\u2088pos : 0 < c\u2088\nhc\u2088 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2088 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2088 * X / (\u03b5 * T)\nc\u2089 : \u211d\nc\u2089pos : c\u2089 > 0\nhc\u2089 : \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2089 \u03bd \u03b5 X T\u2016 \u2264 c\u2089 * X * Real.log X / (\u03b5 * T)\nc\u2084 : \u211d\nc\u2084pos : 0 \u2264 c\u2084\nTlb\u2084 : \u211d\nTlb\u2084bnd : 3 < Tlb\u2084\nhc\u2084 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2084 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2084 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2084 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2086 : \u211d\nc\u2086pos : 0 \u2264 c\u2086\nTlb\u2086 : \u211d\nTlb\u2086bnd : 3 < Tlb\u2086\nhc\u2086 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2086 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2086 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2086 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nC' : \u211d := c_close + C_main\nC'' : \u211d := c\u2081 + c\u2082 + c\u2088 + c\u2089\nC''' : \u211d := c\u2083 + c\u2084 + c\u2086 + c\u2087\nc : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\n\u03b5x : \u211d \u2192 \u211d := fun x => Real.exp (-c * Real.log x ^ (1 / 10))\nTx : \u211d \u2192 \u211d := fun x => Real.exp (2 * c * Real.log x ^ (1 / 10))\neventually_\u03b5x_lt_one : \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < 1\neventually_2_lt : \u2200\u1da0 (x : \u211d) in atTop, 2 < x * \u03b5x x\neventually_T_gt_3 : \u2200\u1da0 (x : \u211d) in atTop, 3 < Tx x\neventually_T_gt_Tlb\u2084 : \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2084 < Tx x\neventually_T_gt_Tlb\u2086 : \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2086 < Tx x\neventually_\u03c3\u2082_lt_\u03c3\u2081 : \u2200\u1da0 (x : \u211d) in atTop, \u03c3\u2082 < 1 - A / Real.log (Tx x) ^ 9\neventually_\u03b5_lt_\u03b5_main : \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < \u03b5_main\n\u22a2 \u2200\u1da0 (x : \u211d) in atTop, 1 \u2264 Real.log x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/f4441d7327caa75ae7879ecfda33fc60ab0cf17e/PrimeNumberTheoremAnd/MediumPNT.lean#L7245"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-07-22T12:27:31-04:00",
        "inclusion_date": "2025-07-22T23:05:23.619594+00:00"
      },
      "id": "f8a609d9205c37ab90913b178451bedc7cf4fd7315f026f1668d14a116778cf7"
    },
    {
      "repo": {
        "remote": "https://github.com/emilyriehl/infinity-cosmos",
        "branch": "main",
        "commit": "18c7658a8e6fd4d8c6d0015a7a933818314adc0e",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "path": "InfinityCosmos/ForMathlib/InfinityCosmos/Goals.lean",
        "start_line": 66,
        "start_column": 20,
        "end_line": 66,
        "end_column": 25
      },
      "debug_info": {
        "goal": "K\u271d : Functor (Discrete WalkingPair) SSet\n\u22a2 PreservesLimit K\u271d hoFunctor",
        "url": "https://github.com/emilyriehl/infinity-cosmos/blob/18c7658a8e6fd4d8c6d0015a7a933818314adc0e/InfinityCosmos/ForMathlib/InfinityCosmos/Goals.lean#L66"
      },
      "metadata": {
        "blame_email_hash": "eaaeec08515d",
        "blame_date": "2025-05-27T17:31:10-04:00",
        "inclusion_date": "2025-09-08T15:00:12.195855+00:00"
      },
      "id": "56e63b09883e85459311397059daa49f2b497b5c2295f203f39c0b09ffdf5ff2"
    },
    {
      "repo": {
        "remote": "https://github.com/frenzymath/jixia",
        "branch": "main",
        "commit": "d171b92cfcc808c3fcfa73b4f41c792648c9d48f",
        "lean_version": "v4.16.0"
      },
      "location": {
        "path": "Example.lean",
        "start_line": 82,
        "start_column": 55,
        "end_line": 82,
        "end_column": 60
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\n\u22a2 \u00acnone.IsSome",
        "url": "https://github.com/frenzymath/jixia/blob/d171b92cfcc808c3fcfa73b4f41c792648c9d48f/Example.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "aa8cba96a488",
        "blame_date": "2024-06-20T19:17:07+08:00",
        "inclusion_date": "2025-05-01T23:43:58.830638+00:00"
      },
      "id": "dda6eca1c24f3d179409b6135dea8b03fa033226aef1a1f3e8df49fa215ab69b"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-ja/lean-by-example",
        "branch": "main",
        "commit": "8dc6868e6d5a673620c1d9759b66f3c01d9543d7",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Playground/Arai60/P001/FP.lean",
        "start_line": 39,
        "start_column": 12,
        "end_line": 39,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case zero\ntarget : Int\nxs : List Int\nk : Nat\nseen : HashMap Int Nat\ni j : Nat\n\u22a2 twoSum.loop target xs k seen = some (i, j) \u2192 i < j",
        "url": "https://github.com/lean-ja/lean-by-example/blob/8dc6868e6d5a673620c1d9759b66f3c01d9543d7/Playground/Arai60/P001/FP.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "a84937a2d49e",
        "blame_date": "2025-07-23T19:03:47+09:00",
        "inclusion_date": "2025-07-30T23:19:43.539577+00:00"
      },
      "id": "156c3a431e8294c9571b2b4fd59304397c2c5acebbbf98ff12ee6220dadf6178"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "edb386dbe041ce9e19ad76d90c5e7fa14608a181",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/MoreRuzsaDist.lean",
        "start_line": 857,
        "start_column": 106,
        "end_line": 857,
        "end_column": 111
      },
      "debug_info": {
        "goal": "G : Type u_8\nhG : MeasurableSpace G\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : MeasurableSingletonClass G\ninst\u271d : Countable G\nm : \u2115\nhm : m \u2265 2\n\u03a9 : Fin m \u2192 Type u_9\nh\u03a9 : (i : Fin m) \u2192 MeasureSpace (\u03a9 i)\nX : (i : Fin m) \u2192 \u03a9 i \u2192 G\n\u22a2 (\u2211 j, \u2211 k, if j = k then 0 else d[X j # -X k]) \u2264 \u2191m * (\u2191m - 1) * @multiDist G hG inst\u271d\u00b2 m \u03a9 h\u03a9 X",
        "url": "https://github.com/teorth/pfr/blob/edb386dbe041ce9e19ad76d90c5e7fa14608a181/PFR/MoreRuzsaDist.lean#L857"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-02T00:15:47-07:00",
        "inclusion_date": "2025-05-03T00:49:01.282024+00:00"
      },
      "id": "2be0150aa78fedfb57d79b8a6097182c5778adf8bbc131f71c5c788fcd941297"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "yu-yama/GroupExtension-Abelian",
        "commit": "11a36226ae8d2c46af1b0bea801b1830c7ab1a07",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "path": "Mathlib/GroupTheory/GroupExtension/Abelian.lean",
        "start_line": 590,
        "start_column": 8,
        "end_line": 590,
        "end_column": 13
      },
      "debug_info": {
        "goal": "N G : Type\ninst\u271d\u00b2 : CommGroup N\ninst\u271d\u00b9 : Group G\ninst\u271d : MulDistribMulAction G N\nS : @GroupExtension.ofMulDistribMulActionWithSection N G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d\nS' : @GroupExtension.ofMulDistribMulActionWithSection N G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d\nequiv :\n  @GroupExtension.ofMulDistribMulAction.Equiv N G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d\n    (@GroupExtension.ofMulDistribMulActionWithSection.toofMulDistribMulAction N G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d S)\n    (@GroupExtension.ofMulDistribMulActionWithSection.toofMulDistribMulAction N G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d S')\ng\u2081 g\u2082 : G\n\u22a2 failed to pretty print expression (use 'set_option pp.rawOnError true' for raw representation)",
        "url": "https://github.com/leanprover-community/mathlib4/blob/11a36226ae8d2c46af1b0bea801b1830c7ab1a07/Mathlib/GroupTheory/GroupExtension/Abelian.lean#L590"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-06-28T08:54:55+00:00",
        "inclusion_date": "2025-06-29T03:10:27.666727+00:00"
      },
      "id": "6f2b1a6d877b00990486ed7a8be5e10b9aa37597e21e5bd7fc6714697acec182"
    },
    {
      "repo": {
        "remote": "https://github.com/PatrickMassot/GlimpseOfLean",
        "branch": "master",
        "commit": "204163b503591e96357e339158a962ad5d5f4e5d",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "GlimpseOfLean/Exercises/Topics/Probability.lean",
        "start_line": 123,
        "start_column": 4,
        "end_line": 123,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case pos\n\u03a9 : Type\ninst\u271d\u00b9 : MeasureSpace \u03a9\ninst\u271d : IsProbabilityMeasure volume\nA B : Set \u03a9\nhB : volume B \u2260 0\nh : volume A = 0\n\u22a2 condProb \u03a9 inst\u271d\u00b9 A B = volume A * condProb \u03a9 inst\u271d\u00b9 B A / volume B",
        "url": "https://github.com/PatrickMassot/GlimpseOfLean/blob/204163b503591e96357e339158a962ad5d5f4e5d/GlimpseOfLean/Exercises/Topics/Probability.lean#L123"
      },
      "metadata": {
        "blame_email_hash": "c28576c1d1dd",
        "blame_date": "2025-04-20T19:47:14+02:00",
        "inclusion_date": "2025-09-18T04:26:21.591374+00:00"
      },
      "id": "cdc66311bab29deaea3437f194990b1580dba6cfa2f9ecf5d018870d3744ad59"
    },
    {
      "repo": {
        "remote": "https://github.com/nomeata/loogle",
        "branch": "master",
        "commit": "15beac7f2a5913571cba016e4b87fed907c54f7d",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "Tests.lean",
        "start_line": 102,
        "start_column": 2,
        "end_line": 102,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m : Nat\n\u22a2 List.replicate (2 * n) () = List.replicate n () ++ List.replicate n ()",
        "url": "https://github.com/nomeata/loogle/blob/15beac7f2a5913571cba016e4b87fed907c54f7d/Tests.lean#L102"
      },
      "metadata": {
        "blame_email_hash": "1e9dd229978a",
        "blame_date": "2023-11-11T14:02:18+01:00",
        "inclusion_date": "2025-09-17T04:17:32.820406+00:00"
      },
      "id": "5980bd155afd8d6034e9ee2c322a2aaaa4c31f1359f8eb7337ae62570d89f2f3"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "duplex-sponge-fs",
        "commit": "0fc5523909130c6100b03cf4a7afb3566f27e485",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean",
        "start_line": 124,
        "start_column": 2,
        "end_line": 124,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a : KoalaBear.Field\nha : a \u2260 0\n\u22a2 a\u207b\u00b9 = a ^ (KoalaBear.fieldSize - 2)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0fc5523909130c6100b03cf4a7afb3566f27e485/ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean#L124"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-09-12T02:34:43-04:00",
        "inclusion_date": "2025-09-18T04:30:57.445731+00:00"
      },
      "id": "cb26c3326987132fc4cd580501647a9ed51f6259876dae0daf34bccacbe18b50"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "StringsCharges",
        "commit": "25c552a2c25a922bf5dbdb120a212ea73b365f5b",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean",
        "start_line": 328,
        "start_column": 30,
        "end_line": 328,
        "end_column": 35
      },
      "debug_info": {
        "goal": "S : HarmonicOscillator\nIC : ClassicalMechanics.HarmonicOscillator.InitialConditions\nx : Time \u2192 Space 1\n\u22a2 S.EquationOfMotion x \u2227\n      x 0 = ClassicalMechanics.HarmonicOscillator.InitialConditions.x\u2080 IC \u2227\n        Time.deriv x 0 = ClassicalMechanics.HarmonicOscillator.InitialConditions.v\u2080 IC \u2192\n    x = ClassicalMechanics.HarmonicOscillator.InitialConditions.trajectory S IC",
        "url": "https://github.com/HEPLean/PhysLean/blob/25c552a2c25a922bf5dbdb120a212ea73b365f5b/PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean#L328"
      },
      "metadata": {
        "blame_email_hash": "7187e3a9e9f5",
        "blame_date": "2025-09-14T18:48:30+01:00",
        "inclusion_date": "2025-09-17T03:53:50.079672+00:00"
      },
      "id": "d2b61c41de8664677093cd6de9e2d6b227cbbb3bf93254095c9db8086aad9f89"
    },
    {
      "repo": {
        "remote": "https://github.com/ufmg-smite/lean-smt",
        "branch": "main",
        "commit": "98b12d984f8c21a99abfb8b69f12fe243beaf7c6",
        "lean_version": "v4.16.0"
      },
      "location": {
        "path": "Smt/Reconstruct/Rat/Core.lean",
        "start_line": 626,
        "start_column": 2,
        "end_line": 626,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a b : Rat\n\u22a2 0 \u2264 a \u2192 0 \u2264 b \u2192 0 \u2264 a * b",
        "url": "https://github.com/ufmg-smite/lean-smt/blob/98b12d984f8c21a99abfb8b69f12fe243beaf7c6/Smt/Reconstruct/Rat/Core.lean#L626"
      },
      "metadata": {
        "blame_email_hash": "a29bc6f92c6c",
        "blame_date": "2025-05-03T21:48:26-07:00",
        "inclusion_date": "2025-05-05T00:05:16.483689+00:00"
      },
      "id": "a9b895e369e7d35f6fc14cac0d071cf8fec58988fd8e694faf7ebffe81035ae4"
    },
    {
      "repo": {
        "remote": "https://github.com/yangky11/miniF2F-lean4",
        "branch": "main",
        "commit": "b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "MiniF2F/Test.lean",
        "start_line": 590,
        "start_column": 0,
        "end_line": 590,
        "end_column": 5
      },
      "debug_info": {
        "goal": "f : \u2115 \u2192 \u2115 \u2192 \u2115\ng : \u2115 \u2192 \u2115\nh\u2080 : \u2200 (y : \u2115), f 0 y = y + 1\nh\u2081 : \u2200 (x : \u2115), f (x + 1) 0 = f x 1\nh\u2082 : \u2200 (x y : \u2115), f (x + 1) (y + 1) = f x (f (x + 1) y)\nh\u2083 : g 0 = 2\nh\u2084 : \u2200 (n : \u2115), g (n + 1) = 2 ^ g n\n\u22a2 f 4 1981 = g 1983 - 3",
        "url": "https://github.com/yangky11/miniF2F-lean4/blob/b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24/MiniF2F/Test.lean#L590"
      },
      "metadata": {
        "blame_email_hash": "e7ac978c7a81",
        "blame_date": "2025-04-24T19:32:39+08:00",
        "inclusion_date": "2025-09-13T05:42:04.635029+00:00"
      },
      "id": "d0823d57721e5569b38be92e1def7d57013fdfeb0040e515447e3d82ffd673a5"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "examples/FloatTest.lean",
        "start_line": 13,
        "start_column": 82,
        "end_line": 13,
        "end_column": 87
      },
      "debug_info": {
        "goal": "x\u271d\u00b3 x\u271d\u00b2 x\u271d\u00b9 x\u271d : PUnit.{1}\n\u22a2 { data := #[1.0, 2.0, 3.0, 4.0, 3.0] }.toByteArray.size % 8 = 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/examples/FloatTest.lean#L13"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2025-01-07T15:43:19-05:00",
        "inclusion_date": "2025-05-29T03:10:06.182872+00:00"
      },
      "id": "e93dd22e7de6d89815d8ae7f4892b134cc27172d51d5b4fb7baa4430a35c18f3"
    },
    {
      "repo": {
        "remote": "https://github.com/cmu-l3/llmlean",
        "branch": "kimina-pr",
        "commit": "126a6b2af37727c4d81bb49f6af6b354a380145e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "LLMleanTest/Examples.lean",
        "start_line": 5,
        "start_column": 2,
        "end_line": 5,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nr s t : Set \u03b1\n\u22a2 r \u2286 s \u2192 s \u2286 t \u2192 r \u2286 t",
        "url": "https://github.com/cmu-l3/llmlean/blob/126a6b2af37727c4d81bb49f6af6b354a380145e/LLMleanTest/Examples.lean#L5"
      },
      "metadata": {
        "blame_email_hash": "3ab0971ac342",
        "blame_date": "2025-06-10T09:47:05-04:00",
        "inclusion_date": "2025-06-11T03:39:01.065377+00:00"
      },
      "id": "591efd953e6e3ffb6858efdb2810638629423c24297050ad15780e5a796f12b9"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/NNG4",
        "branch": "main",
        "commit": "3558f5bfb6c7ec5528498c498ed097c7f772d24f",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "test/induction.lean",
        "start_line": 12,
        "start_column": 4,
        "end_line": 12,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\na : \u2115\n\u22a2 a + 0 = a \u2192 0 = 0",
        "url": "https://github.com/leanprover-community/NNG4/blob/3558f5bfb6c7ec5528498c498ed097c7f772d24f/test/induction.lean#L12"
      },
      "metadata": {
        "blame_email_hash": "56c7f595c669",
        "blame_date": "2024-02-29T17:19:01+01:00",
        "inclusion_date": "2025-09-08T18:41:12.023523+00:00"
      },
      "id": "67b8836845a210ece68f76c8f8a910aa8bb3c25c4c2375fc759fc21d58af92f9"
    },
    {
      "repo": {
        "remote": "https://github.com/mo271/FormalBook",
        "branch": "mathlib_bump_v4.22",
        "commit": "1e02cb575dba482869e55b4b54f299ed879999f5",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FormalBook/Chapter_28.lean",
        "start_line": 64,
        "start_column": 65,
        "end_line": 64,
        "end_column": 70
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : Fintype \u03b1\ninst\u271d\u00b9 : DecidableEq \u03b1\nG : SimpleGraph \u03b1\ninst\u271d : DecidableRel G.Adj\ne : Sym2 \u03b1\nhe : e \u2208 G.edgeFinset\n\u22a2 {v | v \u2208 e}.card = 2",
        "url": "https://github.com/mo271/FormalBook/blob/1e02cb575dba482869e55b4b54f299ed879999f5/FormalBook/Chapter_28.lean#L64"
      },
      "metadata": {
        "blame_email_hash": "ef3bc37f67e8",
        "blame_date": "2025-08-30T22:59:32+02:00",
        "inclusion_date": "2025-09-08T19:42:28.135560+00:00"
      },
      "id": "eebddd5c259be65659da5842ab7eabfc1396463fd0164b49d495b395bd839f81"
    },
    {
      "repo": {
        "remote": "https://github.com/eric-wieser/lean-matrix-cookbook",
        "branch": "master",
        "commit": "5682ac96f54bd119bd92b053962433c6940b6385",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "MatrixCookbook/10FunctionsAndOperators.lean",
        "start_line": 296,
        "start_column": 20,
        "end_line": 296,
        "end_column": 25
      },
      "debug_info": {
        "goal": "m : Type u_4\nn : Type u_5\ninst\u271d\u00b3 : Fintype m\ninst\u271d\u00b2 : Fintype n\ninst\u271d\u00b9 : DecidableEq m\ninst\u271d : DecidableEq n\nA : Matrix m n \u211d\n\u22a2 \u2016A\u2016 \u2264 sorry A",
        "url": "https://github.com/eric-wieser/lean-matrix-cookbook/blob/5682ac96f54bd119bd92b053962433c6940b6385/MatrixCookbook/10FunctionsAndOperators.lean#L296"
      },
      "metadata": {
        "blame_email_hash": "897b33679110",
        "blame_date": "2025-08-06T00:45:33+00:00",
        "inclusion_date": "2025-09-17T03:16:16.716963+00:00"
      },
      "id": "b6f20af8b9c187edf162ac37a633abcb7bf9aa5780fb8b825c36feb541d54d31"
    },
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "54e2692f53004e900064c6f6e8e5a38b2754b0ad",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "Compfiles/Imo1971P3.lean",
        "start_line": 26,
        "start_column": 2,
        "end_line": 26,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 \u2203 s, s.Infinite \u2227 s.Pairwise fun m n => (2 ^ \u2191n - 3).Coprime (2 ^ \u2191m - 3)",
        "url": "https://github.com/dwrensha/compfiles/blob/54e2692f53004e900064c6f6e8e5a38b2754b0ad/Compfiles/Imo1971P3.lean#L26"
      },
      "metadata": {
        "blame_email_hash": "acdd9d7e744e",
        "blame_date": "2025-09-15T13:37:52-04:00",
        "inclusion_date": "2025-09-19T03:11:14.409941+00:00"
      },
      "id": "a368ae85c5fb72e9fa2e69e31d4e9acb654e0f1d8856235a6dff34dde8082c8f"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "generalized-trace",
        "commit": "5c479c65ad77d0b6ad82e6622abd2ad85e349c7d",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean",
        "start_line": 467,
        "start_column": 4,
        "end_line": 467,
        "end_column": 9
      },
      "debug_info": {
        "goal": "T U : ArithmeticTheory\ninst\u271d\u00b2 : Theory.\u0394\u2081 T\ninst\u271d\u00b9 : \ud835\udddc\ud835\udeba\u2081 \u2aaf T\ninst\u271d : T \u2aaf U\nthis\u271d : \ud835\udddc\ud835\udeba\u2081 \u2aaf U\nA : Modal.Formula \u2115\nM : Model\nr : M.World\nw\u271d\u00b9 : M.IsTree r\nw\u271d : Fintype M.World\nh\u2082 : \u00acr \u22a7 A\nh : M.finHeight \u2208 LO.Modal.Logic.trace (T.ProvabilityLogic U)\nhA\u2081 : \u2200 (f : T.StandardRealization), U \u22a2!. \u2191f A\nM\u2080 : Model := M.extendRoot 1\nr\u2080 : M\u2080.World := Frame.extendRoot.root\nRr\u2080 : \u2200 {x : M.World}, r\u2080 \u227a \u2191x\nthis : M\u2080.IsFiniteTree r\u2080\nS : SolovaySentences (Theory.standardProvability T) M\u2080.toFrame r\u2080 := SolovaySentences.standard T M\u2080.toFrame\nx : M\u2080.World\nhA : Satisfies M\u2080 x A\n\u22a2 Satisfies M\u2080 x (TBB M.finHeight)",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5c479c65ad77d0b6ad82e6622abd2ad85e349c7d/Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean#L467"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-09-16T18:11:24+09:00",
        "inclusion_date": "2025-09-17T03:36:03.416511+00:00"
      },
      "id": "158d86393a9a05ea365bca9133e6c188167cee51f1a3dcd6b6b8031e7820fdf7"
    },
    {
      "repo": {
        "remote": "https://github.com/fpvandoorn/carleson",
        "branch": "master",
        "commit": "218b6615448da46a5c14a086fa57c197a0a8131a",
        "lean_version": "v4.22.0-rc2"
      },
      "location": {
        "path": "Carleson/Antichain/AntichainTileCount.lean",
        "start_line": 459,
        "start_column": 74,
        "end_line": 459,
        "end_column": 79
      },
      "debug_info": {
        "goal": "X : Type u_1\na : \u2115\nq : \u211d\nK : X \u2192 X \u2192 \u2102\n\u03c3\u2081 \u03c3\u2082 : X \u2192 \u2124\nF G : Set X\ninst\u271d\u00b2 : MetricSpace X\ninst\u271d\u00b9 : ProofData a q K \u03c3\u2081 \u03c3\u2082 F G\ninst\u271d : TileStructure Q (defaultD a) (default\u03ba a) (defaultS X) (cancelPt X)\n\ud835\udd04 : Finset (\ud835\udd13 X)\n\u03d1 : \u0398 X\nN : \u2115\nL : Grid X\nhL : L \u2208 @Antichain.\ud835\udcdb' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N\nt : Finset (\ud835\udd13 X) := {p | \ud835\udcd8 p = L}\n\u22a2 \u2211 p \u2208 @Antichain.\ud835\udd04' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N \u2229 t, volume (E p \u2229 G \u2229 \u2191L) +\n      \u2211 p \u2208 @Antichain.\ud835\udd04' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N \\ t, volume (E p \u2229 G \u2229 \u2191L) \u2264\n    \u2191(Antichain.C6_3_4 a N) * dens\u2081 \u2191\ud835\udd04 * volume \u2191L",
        "url": "https://github.com/fpvandoorn/carleson/blob/218b6615448da46a5c14a086fa57c197a0a8131a/Carleson/Antichain/AntichainTileCount.lean#L459"
      },
      "metadata": {
        "blame_email_hash": "44a80a4a9c95",
        "blame_date": "2025-07-10T17:55:50+02:00",
        "inclusion_date": "2025-07-11T23:48:31.060328+00:00"
      },
      "id": "eed43aaeda8ee97032ed3839c27f3d50363cee294ba4924e77e2400b83f6e2e6"
    },
    {
      "repo": {
        "remote": "https://github.com/ImperialCollegeLondon/FLT",
        "branch": "kbuzzard-hardly-ramified",
        "commit": "60be88a841fa232b563ea16600befe5efbfb3d07",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FLT/DedekindDomain/FiniteAdeleRing/TensorRestrictedProduct.lean",
        "start_line": 114,
        "start_column": 2,
        "end_line": 114,
        "end_column": 7
      },
      "debug_info": {
        "goal": "R : Type u_1\nM : Type u_2\ninst\u271d\u2076 : CommRing R\ninst\u271d\u2075 : AddCommGroup M\ninst\u271d\u2074 : Module R M\n\u03b9 : Type u_3\nN : \u03b9 \u2192 Type u_4\ninst\u271d\u00b3 : (i : \u03b9) \u2192 AddCommGroup (N i)\ninst\u271d\u00b2 : (i : \u03b9) \u2192 Module R (N i)\n\u2131 : Filter \u03b9\nL : (i : \u03b9) \u2192 Submodule R (N i)\ninst\u271d\u00b9 : Module.FinitePresentation R M\ninst\u271d : Module.Flat R M\n\u22a2 Function.Bijective \u21d1(@RestrictedProduct.lTensor R M inst\u271d\u2076 inst\u271d\u2075 inst\u271d\u2074 \u03b9 N inst\u271d\u00b3 inst\u271d\u00b2 \u2131 L)",
        "url": "https://github.com/ImperialCollegeLondon/FLT/blob/60be88a841fa232b563ea16600befe5efbfb3d07/FLT/DedekindDomain/FiniteAdeleRing/TensorRestrictedProduct.lean#L114"
      },
      "metadata": {
        "blame_email_hash": "ef2b4f3cac6f",
        "blame_date": "2025-09-01T12:02:29+01:00",
        "inclusion_date": "2025-09-18T04:05:26.332171+00:00"
      },
      "id": "3db4c6fb505d0ea8467f00e383e8fca0424a3b4190f756a746d9acce0b228cd1"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "43be1bece7ff58a0168022c39aa223b8e730eca5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/test_continuity.lean",
        "start_line": 20,
        "start_column": 48,
        "end_line": 20,
        "end_column": 53
      },
      "debug_info": {
        "goal": "a : Real\n\u22a2 lt zero one",
        "url": "https://github.com/leanprover-community/duper/blob/43be1bece7ff58a0168022c39aa223b8e730eca5/Duper/Tests/test_continuity.lean#L20"
      },
      "metadata": {
        "blame_email_hash": "4ac7eab8a488",
        "blame_date": "2023-06-05T10:39:00+02:00",
        "inclusion_date": "2025-05-08T23:57:49.858741+00:00"
      },
      "id": "8c1874bf12cff9affa2b3b733c13b2c8770b167d348c91f3c51a3dce6cf572bc"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "c3553c06247678bde54544e88d21636d16cd0579",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "BatteriesTest/lint_unreachableTactic.lean",
        "start_line": 32,
        "start_column": 33,
        "end_line": 32,
        "end_column": 38
      },
      "debug_info": {
        "goal": "aa : Nat\n\u22a2 aa = 0 \u2192 t aa = 0",
        "url": "https://github.com/leanprover-community/batteries/blob/c3553c06247678bde54544e88d21636d16cd0579/BatteriesTest/lint_unreachableTactic.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-26T11:27:15+01:00",
        "inclusion_date": "2025-09-19T03:33:33.814695+00:00"
      },
      "id": "af711159e9bbd7198f6403845af2310c7821f981492c33b049d665a699c04814"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/aesop",
        "branch": "master",
        "commit": "9e8de5716b162ec8983a89711a186d13ff871c22",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "AesopTest/205.lean",
        "start_line": 32,
        "start_column": 2,
        "end_line": 32,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\nx y a b : \u03b1\nh\u2082 : @R \u03b1 x a\nh\u2083 : @R \u03b1 y b\nfwd : @R \u03b1 b y\nfwd_1 : @R \u03b1 a x\nfwd_2 : @R \u03b1 b b\nfwd_3 : @R \u03b1 y y\nfwd_4 : @R \u03b1 a a\nfwd_5 : @R \u03b1 x x\n\u22a2 False",
        "url": "https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/AesopTest/205.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "555bc3b21621",
        "blame_date": "2025-04-29T23:07:06+02:00",
        "inclusion_date": "2025-09-16T04:23:04.307662+00:00"
      },
      "id": "9ca8b473386108875f9b137d93bdd0abb66132593ccc830999e616dee792e775"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/LeanCamCombi",
        "branch": "master",
        "commit": "99a77d19845fb8083456331fd1256bf35a48f60c",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "LeanCamCombi/ExtrProbCombi/BinomialRandomGraph.lean",
        "start_line": 46,
        "start_column": 75,
        "end_line": 46,
        "end_column": 80
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\n\u03a9 : Type u_2\ninst\u271d : MeasurableSpace \u03a9\nG : \u03a9 \u2192 SimpleGraph \u03b1\np : NNReal\n\u03bc : Measure \u03a9\nhG : @IsBinomialRandomGraph \u03b1 \u03a9 inst\u271d G p \u03bc\n\u22a2 iIndepFun (fun e \u03c9 => e \u2208 (G \u03c9).edgeSet) \u03bc",
        "url": "https://github.com/YaelDillies/LeanCamCombi/blob/99a77d19845fb8083456331fd1256bf35a48f60c/LeanCamCombi/ExtrProbCombi/BinomialRandomGraph.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-06T17:45:28+00:00",
        "inclusion_date": "2025-09-08T22:03:06.847248+00:00"
      },
      "id": "080fea1eeb495013ba59e8f00a45c2e05e8a9c21996be580aeb301b4101c9013"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "AK_work",
        "commit": "f4441d7327caa75ae7879ecfda33fc60ab0cf17e",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 7243,
        "start_column": 73,
        "end_line": 7243,
        "end_column": 78
      },
      "debug_info": {
        "goal": "\u03bd : \u211d \u2192 \u211d\n\u03bd_supp : support \u03bd \u2286 Icc (1 / 2) 2\nContDiff1\u03bd : ContDiff \u211d 1 \u03bd\n\u03bd_nonneg : \u2200 x > 0, 0 \u2264 \u03bd x\n\u03bd_massOne : \u222b (x : \u211d) in Ioi 0, \u03bd x / x = 1\nc_close : \u211d\nc_close_pos : c_close > 0\nh_close :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 (\u03b5 : \u211d),\n        0 < \u03b5 \u2192 \u03b5 < 1 \u2192 2 < X * \u03b5 \u2192 \u2016SmoothedChebyshev \u03bd \u03b5 X - \u2191(ChebyshevPsi X)\u2016 \u2264 c_close * \u03b5 * X * Real.log X\n\u03b5_main C_main : \u211d\n\u03b5_main_pos : 0 < \u03b5_main\nC_main_pos : 0 < C_main\nh_main : \u2200 \u03b5 \u2208 Ioo 0 \u03b5_main, \u2016MellinTransform (fun x => \u2191(Smooth1 \u03bd \u03b5 x)) 1 - 1\u2016 \u2264 C_main * \u03b5\nA C_bnd : \u211d\nC_bnd_pos : 0 < C_bnd\nA_in_Ioc : A \u2208 Ioc 0 (1 / 2)\nzeta_bnd : LogDerivZetaHasBound A C_bnd\nholo1 :\n  \u2200 (T : \u211d),\n    3 \u2264 T \u2192\n      HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (Icc (1 - A / Real.log T ^ 9) 2 \u00d7\u2102 Icc (-T) T \\ {1})\n\u03c3\u2082' : \u211d\n\u03c3\u2082 : \u211d := max \u03c3\u2082' (1 / 2)\n\u03c3\u2082_pos : 0 < \u03c3\u2082\n\u03c3\u2082_lt_one : \u03c3\u2082 < 1\nholo2 : HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (uIcc \u03c3\u2082 2 \u00d7\u2102 uIcc (-3) 3 \\ {1})\nc\u2081 : \u211d\nc\u2081pos : c\u2081 > 0\nhc\u2081 : \u2200 (\u03b5 : \u211d), 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2081 \u03bd \u03b5 X T\u2016 \u2264 c\u2081 * X * Real.log X / (\u03b5 * T)\nc\u2082 : \u211d\nc\u2082pos : 0 < c\u2082\nhc\u2082 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2082 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2082 * X / (\u03b5 * T)\nc\u2083 : \u211d\nc\u2083pos : 0 < c\u2083\nhc\u2083 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2083 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2083 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2085 : \u211d\nc\u2085pos : 0 < c\u2085\nhc\u2085 : \u2200 (X : \u211d), 3 < X \u2192 \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2016I\u2085 \u03bd \u03b5 X \u03c3\u2082\u2016 \u2264 c\u2085 * X ^ \u03c3\u2082 / \u03b5\nc\u2087 : \u211d\nc\u2087pos : 0 < c\u2087\nhc\u2087 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2087 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2087 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2088 : \u211d\nc\u2088pos : 0 < c\u2088\nhc\u2088 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2088 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2088 * X / (\u03b5 * T)\nc\u2089 : \u211d\nc\u2089pos : c\u2089 > 0\nhc\u2089 : \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2089 \u03bd \u03b5 X T\u2016 \u2264 c\u2089 * X * Real.log X / (\u03b5 * T)\nc\u2084 : \u211d\nc\u2084pos : 0 \u2264 c\u2084\nTlb\u2084 : \u211d\nTlb\u2084bnd : 3 < Tlb\u2084\nhc\u2084 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2084 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2084 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2084 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2086 : \u211d\nc\u2086pos : 0 \u2264 c\u2086\nTlb\u2086 : \u211d\nTlb\u2086bnd : 3 < Tlb\u2086\nhc\u2086 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2086 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2086 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2086 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nC' : \u211d := c_close + C_main\nC'' : \u211d := c\u2081 + c\u2082 + c\u2088 + c\u2089\nC''' : \u211d := c\u2083 + c\u2084 + c\u2086 + c\u2087\nc : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\n\u03b5x : \u211d \u2192 \u211d := fun x => Real.exp (-c * Real.log x ^ (1 / 10))\nTx : \u211d \u2192 \u211d := fun x => Real.exp (2 * c * Real.log x ^ (1 / 10))\neventually_\u03b5x_lt_one : \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < 1\neventually_2_lt : \u2200\u1da0 (x : \u211d) in atTop, 2 < x * \u03b5x x\neventually_T_gt_3 : \u2200\u1da0 (x : \u211d) in atTop, 3 < Tx x\neventually_T_gt_Tlb\u2084 : \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2084 < Tx x\neventually_T_gt_Tlb\u2086 : \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2086 < Tx x\neventually_\u03c3\u2082_lt_\u03c3\u2081 : \u2200\u1da0 (x : \u211d) in atTop, \u03c3\u2082 < 1 - A / Real.log (Tx x) ^ 9\n\u22a2 \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < \u03b5_main",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/f4441d7327caa75ae7879ecfda33fc60ab0cf17e/PrimeNumberTheoremAnd/MediumPNT.lean#L7243"
      },
      "metadata": {
        "blame_email_hash": "bee09f470e62",
        "blame_date": "2025-07-22T14:25:33+01:00",
        "inclusion_date": "2025-07-22T23:05:23.619594+00:00"
      },
      "id": "bc830a4aab4331161c9e73cc2c5839405265cd1f46e97a73c51980dc3e685923"
    },
    {
      "repo": {
        "remote": "https://github.com/emilyriehl/infinity-cosmos",
        "branch": "main",
        "commit": "8edc65d468b3ed2e4933c7969ec53bd4d904e753",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "InfinityCosmos/ForMathlib/AlgebraicTopology/SimplicialSet/Homotopy.lean",
        "start_line": 133,
        "start_column": 50,
        "end_line": 133,
        "end_column": 55
      },
      "debug_info": {
        "goal": "A : SSet\nf\u271d g\u271d f g h : A _\u298b1\u298c\nH\u2081 : HomotopyL f g\nH\u2082 : HomotopyL f h\n\u03c3 : Subpresheaf.toPresheaf \u039b[3, 1] \u27f6 A := sorry\n\u03c4 : A _\u298b3\u298c := sorry\n\u22a2 SimplicialObject.\u03b4 A 0 \u03c4 = (SimplicialObject.\u03b4 A 0 \u226b SimplicialObject.\u03c3 A 0 \u226b SimplicialObject.\u03c3 A 0) g",
        "url": "https://github.com/emilyriehl/infinity-cosmos/blob/8edc65d468b3ed2e4933c7969ec53bd4d904e753/InfinityCosmos/ForMathlib/AlgebraicTopology/SimplicialSet/Homotopy.lean#L133"
      },
      "metadata": {
        "blame_email_hash": "f0d6831918ab",
        "blame_date": "2024-12-17T23:14:43+01:00",
        "inclusion_date": "2025-05-05T23:23:15.244940+00:00"
      },
      "id": "e145769b3210c6f1a055e23e8bf0b1fc4ea2ace94285c386366305707117b87a"
    },
    {
      "repo": {
        "remote": "https://github.com/frenzymath/jixia",
        "branch": "main",
        "commit": "b5ec1a4ebd714c7e7bda25f64f19beabc212049e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "Example.lean",
        "start_line": 82,
        "start_column": 55,
        "end_line": 82,
        "end_column": 60
      },
      "debug_info": {
        "goal": "\u03b1 : Type u\n\u22a2 \u00ac@Option.IsSome \u03b1 none",
        "url": "https://github.com/frenzymath/jixia/blob/b5ec1a4ebd714c7e7bda25f64f19beabc212049e/Example.lean#L82"
      },
      "metadata": {
        "blame_email_hash": "aa8cba96a488",
        "blame_date": "2024-06-20T19:17:07+08:00",
        "inclusion_date": "2025-07-15T23:02:22.160379+00:00"
      },
      "id": "b545d703b0f4de231105460dc97e5b7bb4579dea92090c690395192558fc2654"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-ja/lean-by-example",
        "branch": "main",
        "commit": "8dc6868e6d5a673620c1d9759b66f3c01d9543d7",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Playground/Arai60/P001/FP.lean",
        "start_line": 40,
        "start_column": 17,
        "end_line": 40,
        "end_column": 22
      },
      "debug_info": {
        "goal": "case succ\ntarget : Int\nxs : List Int\nk : Nat\nseen : HashMap Int Nat\ni j n : Nat\nih : twoSum.loop target xs k seen = some (i, j) \u2192 i < j\n\u22a2 twoSum.loop target xs k seen = some (i, j) \u2192 i < j",
        "url": "https://github.com/lean-ja/lean-by-example/blob/8dc6868e6d5a673620c1d9759b66f3c01d9543d7/Playground/Arai60/P001/FP.lean#L40"
      },
      "metadata": {
        "blame_email_hash": "a84937a2d49e",
        "blame_date": "2025-07-23T19:03:47+09:00",
        "inclusion_date": "2025-07-30T23:19:43.539577+00:00"
      },
      "id": "78a2087fb13178d57e773816a75f792144e8e0ff77dda6f1faa24ed269922af0"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "49109e15a296831048024601c14d33399c526b38",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 181,
        "start_column": 65,
        "end_line": 181,
        "end_column": 70
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\n\u22a2 Nat.card (G \u2192+ ZMod 2) = Nat.card G",
        "url": "https://github.com/teorth/pfr/blob/49109e15a296831048024601c14d33399c526b38/PFR/ApproxHomPFR.lean#L181"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-06-01T03:03:10.481677+00:00"
      },
      "id": "0b0a333097173f6020e721a4295e35b9b92d2dec9e21abe2d182fd2bd4db8136"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "SG_riem",
        "commit": "d19460d77edefdce8aa98e75a75967e384dfc034",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "path": "Mathlib/Geometry/Manifold/Riemannian/Basic.lean",
        "start_line": 397,
        "start_column": 2,
        "end_line": 397,
        "end_column": 7
      },
      "debug_info": {
        "goal": "E : Type u_1\ninst\u271d\u2076 : NormedAddCommGroup E\ninst\u271d\u2075 : NormedSpace \u211d E\nH : Type u_2\ninst\u271d\u2074 : TopologicalSpace H\nI : ModelWithCorners \u211d E H\nM : Type u_3\ninst\u271d\u00b3 : TopologicalSpace M\ninst\u271d\u00b2 : ChartedSpace H M\ninst\u271d\u00b9 : (x : M) \u2192 ENorm (TangentSpace I x)\ninst\u271d : \u2200 (x : M), ENormSMulClass \u211d (TangentSpace I x)\nx y : M\nr : ENNReal\na b : \u211d\nhr : @Manifold.riemannianEDist E inst\u271d\u2076 inst\u271d\u2075 H inst\u271d\u2074 I M inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 x y < r\n\u22a2 \u2203 \u03b3,\n    \u03b3 a = x \u2227\n      \u03b3 b = y \u2227\n        ContMDiff (modelWithCornersSelf \u211d \u211d) I 1 \u03b3 \u2227\n          (\u03b3 =\u1da0[nhds a] fun x_1 => x) \u2227\n            (\u03b3 =\u1da0[nhds b] fun x => y) \u2227\n              @Manifold.pathELength E inst\u271d\u2076 inst\u271d\u2075 H inst\u271d\u2074 I M inst\u271d\u00b3 inst\u271d\u00b2 inst\u271d\u00b9 \u03b3 a b < r",
        "url": "https://github.com/leanprover-community/mathlib4/blob/d19460d77edefdce8aa98e75a75967e384dfc034/Mathlib/Geometry/Manifold/Riemannian/Basic.lean#L397"
      },
      "metadata": {
        "blame_email_hash": "7d87c0724495",
        "blame_date": "2025-06-20T21:03:11+02:00",
        "inclusion_date": "2025-06-22T03:00:50.978825+00:00"
      },
      "id": "ef6472a8f581bb55c4b07fa4cd1843a60b6436bf4f4dfe0e378a252d2eb3f3a3"
    },
    {
      "repo": {
        "remote": "https://github.com/PatrickMassot/GlimpseOfLean",
        "branch": "master",
        "commit": "204163b503591e96357e339158a962ad5d5f4e5d",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "GlimpseOfLean/Exercises/Topics/RingTheory.lean",
        "start_line": 68,
        "start_column": 4,
        "end_line": 68,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : Type u_1\nS : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : CommRing S\nT : Type u_3\ninst\u271d : CommRing T\ng : S \u2192+* T\nf : R \u2192+* S\n\u22a2 g (f 1) = 1",
        "url": "https://github.com/PatrickMassot/GlimpseOfLean/blob/204163b503591e96357e339158a962ad5d5f4e5d/GlimpseOfLean/Exercises/Topics/RingTheory.lean#L68"
      },
      "metadata": {
        "blame_email_hash": "c28576c1d1dd",
        "blame_date": "2025-04-20T11:35:58+02:00",
        "inclusion_date": "2025-09-18T04:26:21.591374+00:00"
      },
      "id": "ff784b4dab4378957cc641748c3eec575ae14a5abca48e92b82553170e3dbe4f"
    },
    {
      "repo": {
        "remote": "https://github.com/nomeata/loogle",
        "branch": "master",
        "commit": "15beac7f2a5913571cba016e4b87fed907c54f7d",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "Tests.lean",
        "start_line": 108,
        "start_column": 2,
        "end_line": 108,
        "end_column": 7
      },
      "debug_info": {
        "goal": "n m : Nat\n\u22a2 List.replicate n () ++ List.replicate m () = List.replicate (n + m) ()",
        "url": "https://github.com/nomeata/loogle/blob/15beac7f2a5913571cba016e4b87fed907c54f7d/Tests.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "1e9dd229978a",
        "blame_date": "2023-11-11T14:02:18+01:00",
        "inclusion_date": "2025-09-17T04:17:32.820406+00:00"
      },
      "id": "f728aea819f6b080be395266f57618e73dbf932bec43b28040f1aa252967d82b"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "duplex-sponge-fs",
        "commit": "0fc5523909130c6100b03cf4a7afb3566f27e485",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean",
        "start_line": 129,
        "start_column": 2,
        "end_line": 129,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 Function.Bijective fun x => x ^ 3",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0fc5523909130c6100b03cf4a7afb3566f27e485/ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean#L129"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-09-12T02:34:43-04:00",
        "inclusion_date": "2025-09-18T04:30:57.445731+00:00"
      },
      "id": "484050389ccabb3440e2d5b81aca5821085de728221173f9ae5e1987770a32a4"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "StringsCharges",
        "commit": "25c552a2c25a922bf5dbdb120a212ea73b365f5b",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean",
        "start_line": 451,
        "start_column": 2,
        "end_line": 451,
        "end_column": 7
      },
      "debug_info": {
        "goal": "S : HarmonicOscillator\nIC : ClassicalMechanics.HarmonicOscillator.InitialConditions\nt : Time\nhx :\n  ClassicalMechanics.HarmonicOscillator.InitialConditions.x\u2080 IC \u2260 0 \u2228\n    ClassicalMechanics.HarmonicOscillator.InitialConditions.v\u2080 IC \u2260 0\n\u22a2 Time.deriv (ClassicalMechanics.HarmonicOscillator.InitialConditions.trajectory S IC) t = 0 \u2194\n    \u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.trajectory S IC t\u2016 =\n      \u221a(\u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.x\u2080 IC\u2016 ^ 2 +\n          (\u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.v\u2080 IC\u2016 / S.\u03c9) ^ 2)",
        "url": "https://github.com/HEPLean/PhysLean/blob/25c552a2c25a922bf5dbdb120a212ea73b365f5b/PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean#L451"
      },
      "metadata": {
        "blame_email_hash": "7187e3a9e9f5",
        "blame_date": "2025-09-14T18:48:30+01:00",
        "inclusion_date": "2025-09-17T03:53:50.079672+00:00"
      },
      "id": "072e2e0b349ec3e34dff706b11e7eeacc37a7740f4b166426087f16a53a9921f"
    },
    {
      "repo": {
        "remote": "https://github.com/ufmg-smite/lean-smt",
        "branch": "main",
        "commit": "98b12d984f8c21a99abfb8b69f12fe243beaf7c6",
        "lean_version": "v4.16.0"
      },
      "location": {
        "path": "Smt/Reconstruct/Rat/Core.lean",
        "start_line": 629,
        "start_column": 2,
        "end_line": 629,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a b : Rat\nhb : 0 \u2264 b\n\u22a2 a.abs = b \u2194 a = b \u2228 a = -b",
        "url": "https://github.com/ufmg-smite/lean-smt/blob/98b12d984f8c21a99abfb8b69f12fe243beaf7c6/Smt/Reconstruct/Rat/Core.lean#L629"
      },
      "metadata": {
        "blame_email_hash": "a29bc6f92c6c",
        "blame_date": "2025-05-03T21:48:26-07:00",
        "inclusion_date": "2025-05-05T00:05:16.483689+00:00"
      },
      "id": "53d7e28ad1b040684d8c870889a949396e63ce04cc8bca6fa9340fe20f17e60d"
    },
    {
      "repo": {
        "remote": "https://github.com/yangky11/miniF2F-lean4",
        "branch": "main",
        "commit": "b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "MiniF2F/Test.lean",
        "start_line": 963,
        "start_column": 35,
        "end_line": 963,
        "end_column": 40
      },
      "debug_info": {
        "goal": "a b : \u2102\nh\u2080 : a ^ 3 - 8 = 0\nh\u2081 : b ^ 3 - 8 * b ^ 2 - 8 * b + 64 = 0\n\u22a2 \u2016a - b\u2016 \u2264 2 * \u221a21",
        "url": "https://github.com/yangky11/miniF2F-lean4/blob/b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24/MiniF2F/Test.lean#L963"
      },
      "metadata": {
        "blame_email_hash": "b262f07ece49",
        "blame_date": "2025-03-21T12:45:32+01:00",
        "inclusion_date": "2025-09-13T05:42:04.635029+00:00"
      },
      "id": "a918ba84e307e030f6968145ecaa9c61be47e9e942af14552e78f9b0a5fd130d"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Test/realToFloat.lean",
        "start_line": 23,
        "start_column": 2,
        "end_line": 23,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 (fun x => x.1.exp + isomorph `RealToFloat (fun x => x.2 0) x) = fun p => p.1.exp + p.2 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/Test/realToFloat.lean#L23"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-11-19T16:57:30-05:00",
        "inclusion_date": "2025-05-29T03:10:06.182872+00:00"
      },
      "id": "c0d54bfa60547c746dc115d30556d3fd78b550ff3be63d063386c3bbc6a7e3a3"
    },
    {
      "repo": {
        "remote": "https://github.com/cmu-l3/llmlean",
        "branch": "kimina-pr",
        "commit": "126a6b2af37727c4d81bb49f6af6b354a380145e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "LLMleanTest/Examples.lean",
        "start_line": 8,
        "start_column": 2,
        "end_line": 8,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x y : \u2115\n\u22a2 x + y = y + x",
        "url": "https://github.com/cmu-l3/llmlean/blob/126a6b2af37727c4d81bb49f6af6b354a380145e/LLMleanTest/Examples.lean#L8"
      },
      "metadata": {
        "blame_email_hash": "3ab0971ac342",
        "blame_date": "2025-06-10T09:47:05-04:00",
        "inclusion_date": "2025-06-11T03:39:01.065377+00:00"
      },
      "id": "ba9403b374fcff31618ae37b367f084ae098a717671e1713f8ca1d55b949b5ea"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/NNG4",
        "branch": "main",
        "commit": "3558f5bfb6c7ec5528498c498ed097c7f772d24f",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "test/induction.lean",
        "start_line": 13,
        "start_column": 4,
        "end_line": 13,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\na d : \u2115\nhd : a + d = a \u2192 d = 0\n\u22a2 a + d.succ = a \u2192 d.succ = 0",
        "url": "https://github.com/leanprover-community/NNG4/blob/3558f5bfb6c7ec5528498c498ed097c7f772d24f/test/induction.lean#L13"
      },
      "metadata": {
        "blame_email_hash": "56c7f595c669",
        "blame_date": "2024-02-29T17:19:01+01:00",
        "inclusion_date": "2025-09-08T18:41:12.023523+00:00"
      },
      "id": "81bdb0baeff0a50eddd17b7b5e6f7afce5b72230d60ca1fd651d6d77af10ff4e"
    },
    {
      "repo": {
        "remote": "https://github.com/mo271/FormalBook",
        "branch": "mathlib_bump_v4.22",
        "commit": "1e02cb575dba482869e55b4b54f299ed879999f5",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FormalBook/Chapter_06.lean",
        "start_line": 77,
        "start_column": 29,
        "end_line": 77,
        "end_column": 34
      },
      "debug_info": {
        "goal": "q n : \u2115\nlamb : \u2102\na : \u211d := lamb.re\nb : \u211d := lamb.im\nh : lamb \u2208 primitiveRoots n \u2102\nh_lamb : lamb \u2260 1\nh_a_lt_one : \u2016a\u2016 < 1\n\u22a2 \u2016eval (\u2191q) (X - C lamb)\u2016 ^ 2 = \u2016\u2191q - lamb\u2016 ^ 2",
        "url": "https://github.com/mo271/FormalBook/blob/1e02cb575dba482869e55b4b54f299ed879999f5/FormalBook/Chapter_06.lean#L77"
      },
      "metadata": {
        "blame_email_hash": "ef3bc37f67e8",
        "blame_date": "2025-08-30T22:59:32+02:00",
        "inclusion_date": "2025-09-08T19:42:28.135560+00:00"
      },
      "id": "65afab71b841038f639e6ccf781c987564640618f8f5a694d9bd04e253e26f7c"
    },
    {
      "repo": {
        "remote": "https://github.com/eric-wieser/lean-matrix-cookbook",
        "branch": "master",
        "commit": "5682ac96f54bd119bd92b053962433c6940b6385",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "MatrixCookbook/10FunctionsAndOperators.lean",
        "start_line": 296,
        "start_column": 27,
        "end_line": 296,
        "end_column": 32
      },
      "debug_info": {
        "goal": "m : Type u_4\nn : Type u_5\ninst\u271d\u00b3 : Fintype m\ninst\u271d\u00b2 : Fintype n\ninst\u271d\u00b9 : DecidableEq m\ninst\u271d : DecidableEq n\nA : Matrix m n \u211d\n\u22a2 \u2016A\u2016 \u2264 \u2016A\u2016",
        "url": "https://github.com/eric-wieser/lean-matrix-cookbook/blob/5682ac96f54bd119bd92b053962433c6940b6385/MatrixCookbook/10FunctionsAndOperators.lean#L296"
      },
      "metadata": {
        "blame_email_hash": "897b33679110",
        "blame_date": "2025-08-06T00:45:33+00:00",
        "inclusion_date": "2025-09-17T03:16:16.716963+00:00"
      },
      "id": "9f2d2578844adcc0d59d4ecac9a59e6085b0e0374152d727dc38657bd4319a00"
    },
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "54e2692f53004e900064c6f6e8e5a38b2754b0ad",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "Compfiles/Imo2025P3.lean",
        "start_line": 37,
        "start_column": 2,
        "end_line": 37,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 IsLeast {c | is_valid_c c} answer",
        "url": "https://github.com/dwrensha/compfiles/blob/54e2692f53004e900064c6f6e8e5a38b2754b0ad/Compfiles/Imo2025P3.lean#L37"
      },
      "metadata": {
        "blame_email_hash": "a8cae0732ec0",
        "blame_date": "2025-09-14T14:53:31+03:00",
        "inclusion_date": "2025-09-19T03:11:14.409941+00:00"
      },
      "id": "7798e4c308068e19a48867e705281155e8a961f88bae1a0d2f2bf05caa356e50"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "generalized-trace",
        "commit": "5c479c65ad77d0b6ad82e6622abd2ad85e349c7d",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean",
        "start_line": 517,
        "start_column": 4,
        "end_line": 517,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case refine_2\nT U : ArithmeticTheory\ninst\u271d\u00b2 : Theory.\u0394\u2081 T\ninst\u271d\u00b9 : \ud835\udddc\ud835\udeba\u2081 \u2aaf T\ninst\u271d : T \u2aaf U\nh : \u00acT.ProvabilityLogic U \u2286 Modal.S\n\u22a2 T.ProvabilityLogic U =\n    Modal.GL\u03b2Minus (LO.Modal.Logic.trace (T.ProvabilityLogic U))\n      (LO.ProvabilityLogic.eq_provabilityLogic_GL\u03b2Minus_of_not_subset_S._proof_1 T U inst\u271d\u00b2\n        (Mathlib.Tactic.Contrapose.mtr (\u00acT.ProvabilityLogic U \u2286 Modal.S)\n          (@Set.Cofinite \u2115 (LO.Modal.Logic.trace (T.ProvabilityLogic U))) \u22ef h))",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5c479c65ad77d0b6ad82e6622abd2ad85e349c7d/Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean#L517"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-09-16T18:11:24+09:00",
        "inclusion_date": "2025-09-17T03:36:03.416511+00:00"
      },
      "id": "5d1a84d2e53a6531f21b167631320c33606840f06310a77f5d300877514998ff"
    },
    {
      "repo": {
        "remote": "https://github.com/fpvandoorn/carleson",
        "branch": "ineq_6_3_30",
        "commit": "a11d007aa69834cdf5b6b203a05898acb98d4605",
        "lean_version": "v4.22.0-rc2"
      },
      "location": {
        "path": "Carleson/Antichain/AntichainTileCount.lean",
        "start_line": 612,
        "start_column": 4,
        "end_line": 612,
        "end_column": 9
      },
      "debug_info": {
        "goal": "X : Type u_1\na : \u2115\nq : \u211d\nK : X \u2192 X \u2192 \u2102\n\u03c3\u2081 \u03c3\u2082 : X \u2192 \u2124\nF G : Set X\ninst\u271d\u00b2 : MetricSpace X\ninst\u271d\u00b9 : ProofData a q K \u03c3\u2081 \u03c3\u2082 F G\ninst\u271d : TileStructure Q (defaultD a) (default\u03ba a) (defaultS X) (cancelPt X)\n\ud835\udd04 : Set (\ud835\udd13 X)\n\u03d1 : \u0398 X\nN : \u2115\nL : Grid X\nhL : L \u2208 @Antichain.\ud835\udcdb' X a q K \u03c3\u2081 \u03c3\u2082 F G inst\u271d\u00b2 inst\u271d\u00b9 inst\u271d \ud835\udd04 \u03d1 N\n\u22a2 \u03d1 \u2208 range \u21d1Q",
        "url": "https://github.com/fpvandoorn/carleson/blob/a11d007aa69834cdf5b6b203a05898acb98d4605/Carleson/Antichain/AntichainTileCount.lean#L612"
      },
      "metadata": {
        "blame_email_hash": "b2f50b2f722a",
        "blame_date": "2025-07-08T20:14:42+02:00",
        "inclusion_date": "2025-07-11T03:02:12.360312+00:00"
      },
      "id": "03343724b628ea0bd4065436e2fd6a1bf642dd3706e72e0c698b7e0027d03084"
    },
    {
      "repo": {
        "remote": "https://github.com/ImperialCollegeLondon/FLT",
        "branch": "kbuzzard-hardly-ramified",
        "commit": "60be88a841fa232b563ea16600befe5efbfb3d07",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FLT/EllipticCurve/Torsion.lean",
        "start_line": 50,
        "start_column": 68,
        "end_line": 50,
        "end_column": 73
      },
      "debug_info": {
        "goal": "A : Type u_1\ninst\u271d : AddCommGroup A\nn : \u2115\nhn : 0 < n\nr : \u2115\nh : \u2200 (d : \u2115), d \u2223 n \u2192 Nat.card \u21a5(Submodule.torsionBy \u2124 A \u2191d) = d ^ r\n\u22a2 Nonempty (\u21a5(Submodule.torsionBy \u2124 A \u2191n) \u2243+ (Fin r \u2192 ZMod n))",
        "url": "https://github.com/ImperialCollegeLondon/FLT/blob/60be88a841fa232b563ea16600befe5efbfb3d07/FLT/EllipticCurve/Torsion.lean#L50"
      },
      "metadata": {
        "blame_email_hash": "2bd6560e713c",
        "blame_date": "2025-09-01T06:13:01-04:00",
        "inclusion_date": "2025-09-18T04:05:26.332171+00:00"
      },
      "id": "dbf585f19651f6de18c71e00fd0e8920b67ef9d8e51bf2b8cd642fde147a3a9f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "dev",
        "commit": "43be1bece7ff58a0168022c39aa223b8e730eca5",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "Duper/Tests/lastAsylum.lean",
        "start_line": 35,
        "start_column": 13,
        "end_line": 35,
        "end_column": 18
      },
      "debug_info": {
        "goal": "ax1 : \u2200 (x : Inhab), Peculiar x \u2194 (Sane x \u2194 \u00acDoctor x)\nax2 : \u2200 (x : Inhab), Special x \u2194 \u2200 (y : Inhab), \u00acDoctor y \u2194 (Sane y \u2194 Peculiar x)\nax3 : \u2200 (x y : Inhab), (Sane x \u2194 Special y) \u2192 (Sane (bf x) \u2194 \u00acDoctor y)\nax4 : Sane Tarr \u2194 \u2200 (x : Inhab), Doctor x \u2192 Sane x\nax5 : Sane Fether \u2194 \u2200 (x : Inhab), \u00acDoctor x \u2192 \u00acSane x\nax6 : Sane Fether \u2194 Sane Tarr\n\u22a2 False",
        "url": "https://github.com/leanprover-community/duper/blob/43be1bece7ff58a0168022c39aa223b8e730eca5/Duper/Tests/lastAsylum.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "d9c480704efb",
        "blame_date": "2022-08-01T22:37:02-04:00",
        "inclusion_date": "2025-05-08T23:57:49.858741+00:00"
      },
      "id": "1a84b4382e896315779fe88e608c4ab68099e1c382302ed640d38e38c297f72c"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "c3553c06247678bde54544e88d21636d16cd0579",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "BatteriesTest/conv_equals.lean",
        "start_line": 22,
        "start_column": 2,
        "end_line": 22,
        "end_column": 7
      },
      "debug_info": {
        "goal": "P : (Nat \u2192 Nat) \u2192 Prop\n\u22a2 P fun n => 0",
        "url": "https://github.com/leanprover-community/batteries/blob/c3553c06247678bde54544e88d21636d16cd0579/BatteriesTest/conv_equals.lean#L22"
      },
      "metadata": {
        "blame_email_hash": "1e9dd229978a",
        "blame_date": "2023-08-19T05:19:41+02:00",
        "inclusion_date": "2025-09-19T03:33:33.814695+00:00"
      },
      "id": "a60f4f18ea2aba86819204ffe3d754c0438e4d356da9761a22b5f585b85f1967"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/aesop",
        "branch": "master",
        "commit": "9e8de5716b162ec8983a89711a186d13ff871c22",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "AesopTest/ExtScript.lean",
        "start_line": 108,
        "start_column": 12,
        "end_line": 108,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case a\n\u03b1 \u03b2 \u03b3 \u03b4 \u03b9 : Type\nx y : T\n\u22a2 u = v",
        "url": "https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/AesopTest/ExtScript.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "555bc3b21621",
        "blame_date": "2024-09-10T21:14:20+02:00",
        "inclusion_date": "2025-09-16T04:23:04.307662+00:00"
      },
      "id": "d57bed0dc82a97bfbea21c68597be1d68eaa16f625e3315ce7d999d2abbc3105"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/LeanCamCombi",
        "branch": "master",
        "commit": "5df79658756ef6d112f2464eec3aece31e35cc83",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "LeanCamCombi/ExtrProbCombi/BernoulliSeq.lean",
        "start_line": 117,
        "start_column": 8,
        "end_line": 117,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case refine_1.refine_1\n\u03b1 : Type u_1\n\u03a9 : Type u_2\ninst\u271d\u00b9 : MeasurableSpace \u03a9\nX Y : \u03a9 \u2192 Set \u03b1\n\u03bc : Measure \u03a9\np q : \u211d\u22650\nhX : IsBernoulliSeq X p \u03bc\nhY : IsBernoulliSeq Y q \u03bc\ninst\u271d : IsProbabilityMeasure \u03bc\nh : IndepFun X Y \u03bc\ni : \u03b1\n\u22a2 MeasurableSet fun \u03c9 => X \u03c9 i",
        "url": "https://github.com/YaelDillies/LeanCamCombi/blob/5df79658756ef6d112f2464eec3aece31e35cc83/LeanCamCombi/ExtrProbCombi/BernoulliSeq.lean#L117"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-05T14:51:44+00:00",
        "inclusion_date": "2025-04-18T00:01:05.296811+00:00"
      },
      "id": "c06097e51866c5822f2ad5c1f1270bafce0377529b89ed6cb91d59de11397399"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "main",
        "commit": "b5313cfd2308dfb6b98d7321bf26243984e4d291",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 7238,
        "start_column": 73,
        "end_line": 7238,
        "end_column": 78
      },
      "debug_info": {
        "goal": "\u03bd : \u211d \u2192 \u211d\n\u03bd_supp : support \u03bd \u2286 Icc (1 / 2) 2\nContDiff1\u03bd : ContDiff \u211d 1 \u03bd\n\u03bd_nonneg : \u2200 x > 0, 0 \u2264 \u03bd x\n\u03bd_massOne : \u222b (x : \u211d) in Ioi 0, \u03bd x / x = 1\nc_close : \u211d\nc_close_pos : c_close > 0\nh_close :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 (\u03b5 : \u211d),\n        0 < \u03b5 \u2192 \u03b5 < 1 \u2192 2 < X * \u03b5 \u2192 \u2016SmoothedChebyshev \u03bd \u03b5 X - \u2191(ChebyshevPsi X)\u2016 \u2264 c_close * \u03b5 * X * Real.log X\n\u03b5_main C_main : \u211d\n\u03b5_main_pos : 0 < \u03b5_main\nC_main_pos : 0 < C_main\nh_main : \u2200 \u03b5 \u2208 Ioo 0 \u03b5_main, \u2016MellinTransform (fun x => \u2191(Smooth1 \u03bd \u03b5 x)) 1 - 1\u2016 \u2264 C_main * \u03b5\nA C_bnd : \u211d\nC_bnd_pos : 0 < C_bnd\nA_in_Ioc : A \u2208 Ioc 0 (1 / 2)\nzeta_bnd : LogDerivZetaHasBound A C_bnd\nholo1 :\n  \u2200 (T : \u211d),\n    3 \u2264 T \u2192\n      HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (Icc (1 - A / Real.log T ^ 9) 2 \u00d7\u2102 Icc (-T) T \\ {1})\n\u03c3\u2082' : \u211d\n\u03c3\u2082 : \u211d := max \u03c3\u2082' (1 / 2)\n\u03c3\u2082_pos : 0 < \u03c3\u2082\n\u03c3\u2082_lt_one : \u03c3\u2082 < 1\nholo2 : HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (uIcc \u03c3\u2082 2 \u00d7\u2102 uIcc (-3) 3 \\ {1})\nc\u2081 : \u211d\nc\u2081pos : c\u2081 > 0\nhc\u2081 : \u2200 (\u03b5 : \u211d), 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2081 \u03bd \u03b5 X T\u2016 \u2264 c\u2081 * X * Real.log X / (\u03b5 * T)\nc\u2082 : \u211d\nc\u2082pos : 0 < c\u2082\nhc\u2082 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2082 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2082 * X / (\u03b5 * T)\nc\u2083 : \u211d\nc\u2083pos : 0 < c\u2083\nhc\u2083 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2083 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2083 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2085 : \u211d\nc\u2085pos : 0 < c\u2085\nhc\u2085 : \u2200 (X : \u211d), 3 < X \u2192 \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2016I\u2085 \u03bd \u03b5 X \u03c3\u2082\u2016 \u2264 c\u2085 * X ^ \u03c3\u2082 / \u03b5\nc\u2087 : \u211d\nc\u2087pos : 0 < c\u2087\nhc\u2087 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2087 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2087 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2088 : \u211d\nc\u2088pos : 0 < c\u2088\nhc\u2088 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2088 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2088 * X / (\u03b5 * T)\nc\u2089 : \u211d\nc\u2089pos : c\u2089 > 0\nhc\u2089 : \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2089 \u03bd \u03b5 X T\u2016 \u2264 c\u2089 * X * Real.log X / (\u03b5 * T)\nc\u2084 : \u211d\nc\u2084pos : 0 \u2264 c\u2084\nTlb\u2084 : \u211d\nTlb\u2084bnd : 3 < Tlb\u2084\nhc\u2084 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2084 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2084 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2084 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2086 : \u211d\nc\u2086pos : 0 \u2264 c\u2086\nTlb\u2086 : \u211d\nTlb\u2086bnd : 3 < Tlb\u2086\nhc\u2086 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2086 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2086 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2086 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\n\u03b5x : \u211d \u2192 \u211d := fun x => Real.exp (-c * Real.log x ^ (1 / 10))\nTx : \u211d \u2192 \u211d := fun x => Real.exp (2 * c * Real.log x ^ (1 / 10))\neventually_\u03b5x_lt_one : \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < 1\neventually_2_lt : \u2200\u1da0 (x : \u211d) in atTop, 2 < x * \u03b5x x\neventually_T_gt_3 : \u2200\u1da0 (x : \u211d) in atTop, 3 < Tx x\neventually_T_gt_Tlb\u2084 : \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2084 < Tx x\neventually_T_gt_Tlb\u2086 : \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2086 < Tx x\neventually_\u03c3\u2082_lt_\u03c3\u2081 : \u2200\u1da0 (x : \u211d) in atTop, \u03c3\u2082 < 1 - A / Real.log (Tx x) ^ 9\n\u22a2 \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < \u03b5_main",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/b5313cfd2308dfb6b98d7321bf26243984e4d291/PrimeNumberTheoremAnd/MediumPNT.lean#L7238"
      },
      "metadata": {
        "blame_email_hash": "bee09f470e62",
        "blame_date": "2025-07-22T14:25:33+01:00",
        "inclusion_date": "2025-07-22T23:27:42.532828+00:00"
      },
      "id": "8600f41c7f4bd10d3b4989c01493c27d6d7df0b32e836bf1e7b75d54634b0465"
    },
    {
      "repo": {
        "remote": "https://github.com/emilyriehl/infinity-cosmos",
        "branch": "main",
        "commit": "8edc65d468b3ed2e4933c7969ec53bd4d904e753",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "InfinityCosmos/ForMathlib/AlgebraicTopology/SimplicialSet/Homotopy.lean",
        "start_line": 134,
        "start_column": 36,
        "end_line": 134,
        "end_column": 41
      },
      "debug_info": {
        "goal": "A : SSet\nf\u271d g\u271d f g h : A _\u298b1\u298c\nH\u2081 : HomotopyL f g\nH\u2082 : HomotopyL f h\n\u03c3 : Subpresheaf.toPresheaf \u039b[3, 1] \u27f6 A := sorry\n\u03c4 : A _\u298b3\u298c := sorry\n\u03c4\u2080 : SimplicialObject.\u03b4 A 0 \u03c4 = (SimplicialObject.\u03b4 A 0 \u226b SimplicialObject.\u03c3 A 0 \u226b SimplicialObject.\u03c3 A 0) g\n\u22a2 SimplicialObject.\u03b4 A 2 \u03c4 = H\u2082.simplex",
        "url": "https://github.com/emilyriehl/infinity-cosmos/blob/8edc65d468b3ed2e4933c7969ec53bd4d904e753/InfinityCosmos/ForMathlib/AlgebraicTopology/SimplicialSet/Homotopy.lean#L134"
      },
      "metadata": {
        "blame_email_hash": "f0d6831918ab",
        "blame_date": "2024-12-17T23:14:43+01:00",
        "inclusion_date": "2025-05-05T23:23:15.244940+00:00"
      },
      "id": "4f7d5896175e711b887c3aec607b8fcba17340ee713df4bf19a92ed8e3eb5680"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-ja/lean-by-example",
        "branch": "main",
        "commit": "8dc6868e6d5a673620c1d9759b66f3c01d9543d7",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Playground/Arai60/P001/FP.lean",
        "start_line": 49,
        "start_column": 4,
        "end_line": 49,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case cons\nnums : List Int\ntarget : Int\ni j : Nat\nn : Int\nrest : List Int\nih : twoSum rest target = some (i, j) \u2192 i < j\nh : twoSum.loop target rest 1 (\u2205.insert n 0) = some (i, j)\n\u22a2 i < j",
        "url": "https://github.com/lean-ja/lean-by-example/blob/8dc6868e6d5a673620c1d9759b66f3c01d9543d7/Playground/Arai60/P001/FP.lean#L49"
      },
      "metadata": {
        "blame_email_hash": "a84937a2d49e",
        "blame_date": "2025-07-23T19:03:47+09:00",
        "inclusion_date": "2025-07-30T23:19:43.539577+00:00"
      },
      "id": "164db11d7e1701fb1306ecc0123190bbdd6313f7eaddff1289f7bd29f997e217"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "49109e15a296831048024601c14d33399c526b38",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 183,
        "start_column": 114,
        "end_line": 183,
        "end_column": 119
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\nx : G\nhx : x \u2260 0\n\u22a2 Nat.card \u2191{\u03c6 | \u03c6 x = 1} = Nat.card G / 2",
        "url": "https://github.com/teorth/pfr/blob/49109e15a296831048024601c14d33399c526b38/PFR/ApproxHomPFR.lean#L183"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-06-01T03:03:10.481677+00:00"
      },
      "id": "6ae7f947eec4b094d53ce34549c2a563d41d7fbd8a79fae4df113fdc5cce1795"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "ocfnash/concrete_g2",
        "commit": "df98409817547fdb6b54dab7643a9557437c0462",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "path": "Mathlib/LinearAlgebra/RootSystem/Finite/G2.lean",
        "start_line": 600,
        "start_column": 4,
        "end_line": 600,
        "end_column": 9
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nR : Type u_2\nM : Type u_3\nN : Type u_4\ninst\u271d\u2075 : CommRing R\ninst\u271d\u2074 : AddCommGroup M\ninst\u271d\u00b3 : Module R M\ninst\u271d\u00b2 : AddCommGroup N\ninst\u271d\u00b9 : Module R N\nP : RootPairing \u03b9 R M N\ninst\u271d : CharZero R\n\u22a2 Submodule.span R\n      (Set.range\n        \u21d1({ toFun := List.get RootPairing.EmbeddedG2.allCoeffs, inj' := \u22ef }.trans\n            { toFun := fun x => Int.cast \u2218 x, inj' := \u22ef })) =\n    \u22a4",
        "url": "https://github.com/leanprover-community/mathlib4/blob/df98409817547fdb6b54dab7643a9557437c0462/Mathlib/LinearAlgebra/RootSystem/Finite/G2.lean#L600"
      },
      "metadata": {
        "blame_email_hash": "1b004c50e78f",
        "blame_date": "2025-06-18T13:01:58+01:00",
        "inclusion_date": "2025-06-19T03:05:54.574593+00:00"
      },
      "id": "5fa7dbf9891f06a811113a4c400beb6455bc61900c24d1d17805701c6ce03e6c"
    },
    {
      "repo": {
        "remote": "https://github.com/PatrickMassot/GlimpseOfLean",
        "branch": "master",
        "commit": "204163b503591e96357e339158a962ad5d5f4e5d",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "GlimpseOfLean/Exercises/Topics/RingTheory.lean",
        "start_line": 70,
        "start_column": 4,
        "end_line": 70,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : Type u_1\nS : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : CommRing S\nT : Type u_3\ninst\u271d : CommRing T\ng : S \u2192+* T\nf : R \u2192+* S\n\u22a2 \u2200 (x y : R), g (f (x * y)) = g (f x) * g (f y)",
        "url": "https://github.com/PatrickMassot/GlimpseOfLean/blob/204163b503591e96357e339158a962ad5d5f4e5d/GlimpseOfLean/Exercises/Topics/RingTheory.lean#L70"
      },
      "metadata": {
        "blame_email_hash": "c28576c1d1dd",
        "blame_date": "2025-04-20T11:35:58+02:00",
        "inclusion_date": "2025-09-18T04:26:21.591374+00:00"
      },
      "id": "c8ed1983817689d7cac50801fa871734f5016d942bcbb3b84b5783242fdfd7bc"
    },
    {
      "repo": {
        "remote": "https://github.com/nomeata/loogle",
        "branch": "master",
        "commit": "b340a5b73a68fd54d624ac1f9c025c11f638bb53",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Tests.lean",
        "start_line": 169,
        "start_column": 82,
        "end_line": 169,
        "end_column": 87
      },
      "debug_info": {
        "goal": "R : Type u_1\ninst\u271d\u00b9 : Mul R\ninst\u271d : Star R\nx : R\n\u22a2 star x * x = x * star x",
        "url": "https://github.com/nomeata/loogle/blob/b340a5b73a68fd54d624ac1f9c025c11f638bb53/Tests.lean#L169"
      },
      "metadata": {
        "blame_email_hash": "1e9dd229978a",
        "blame_date": "2023-11-11T14:02:18+01:00",
        "inclusion_date": "2025-04-14T00:17:19.239440+00:00"
      },
      "id": "b8e6a617e0cd645aeb14c4d11910d7b306f6b4356a8ac700d9b76dcbed5d1792"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "duplex-sponge-fs",
        "commit": "0fc5523909130c6100b03cf4a7afb3566f27e485",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean",
        "start_line": 149,
        "start_column": 2,
        "end_line": 149,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bits : Fin (KoalaBear.twoAdicity + 1)\n\u22a2 IsPrimitiveRoot KoalaBear.twoAdicGenerators[bits] (2 ^ \u2191bits)",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0fc5523909130c6100b03cf4a7afb3566f27e485/ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean#L149"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-09-12T02:34:43-04:00",
        "inclusion_date": "2025-09-18T04:30:57.445731+00:00"
      },
      "id": "7bfd773ba5ddc773cbf047a48545ff6f73f6bb2ca46bac76845da22728ed2d19"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "Inertia",
        "commit": "1597a1afa1c8c9794baad65270a05523d232cfa9",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean",
        "start_line": 265,
        "start_column": 2,
        "end_line": 265,
        "end_column": 7
      },
      "debug_info": {
        "goal": "S : HarmonicOscillator\nIC : ClassicalMechanics.HarmonicOscillator.InitialConditions\nt : Time\nhx :\n  ClassicalMechanics.HarmonicOscillator.InitialConditions.x\u2080 IC \u2260 0 \u2228\n    ClassicalMechanics.HarmonicOscillator.InitialConditions.v\u2080 IC \u2260 0\n\u22a2 Time.deriv (ClassicalMechanics.HarmonicOscillator.sol S IC) t = 0 \u2194\n    ClassicalMechanics.HarmonicOscillator.sol S IC t =\n      \u221a(\u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.x\u2080 IC\u2016 ^ 2 +\n            (\u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.v\u2080 IC\u2016 / S.\u03c9) ^ 2) \u2022\n        Space.basis 0",
        "url": "https://github.com/HEPLean/PhysLean/blob/1597a1afa1c8c9794baad65270a05523d232cfa9/PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean#L265"
      },
      "metadata": {
        "blame_email_hash": "7187e3a9e9f5",
        "blame_date": "2025-09-11T15:35:52+01:00",
        "inclusion_date": "2025-09-12T04:22:08.671672+00:00"
      },
      "id": "2628adb62537eebafda954123c62583855957dac9ee1fcb53a8aa7fd0e29b992"
    },
    {
      "repo": {
        "remote": "https://github.com/ufmg-smite/lean-smt",
        "branch": "main",
        "commit": "98b12d984f8c21a99abfb8b69f12fe243beaf7c6",
        "lean_version": "v4.16.0"
      },
      "location": {
        "path": "Smt/Reconstruct/Rat/Core.lean",
        "start_line": 632,
        "start_column": 2,
        "end_line": 632,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x : Rat\n\u22a2 0 \u2264 x.abs",
        "url": "https://github.com/ufmg-smite/lean-smt/blob/98b12d984f8c21a99abfb8b69f12fe243beaf7c6/Smt/Reconstruct/Rat/Core.lean#L632"
      },
      "metadata": {
        "blame_email_hash": "a29bc6f92c6c",
        "blame_date": "2025-05-03T21:48:26-07:00",
        "inclusion_date": "2025-05-05T00:05:16.483689+00:00"
      },
      "id": "b38f5b0dafcde2cac1b1d9d70f0102f7aac726d9b58a4b1855b5051060d9298c"
    },
    {
      "repo": {
        "remote": "https://github.com/yangky11/miniF2F-lean4",
        "branch": "main",
        "commit": "b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "MiniF2F/Test.lean",
        "start_line": 39,
        "start_column": 54,
        "end_line": 39,
        "end_column": 59
      },
      "debug_info": {
        "goal": "\u22a2 (\u2211 x \u2208 Finset.range 10, (x + 1) ^ 2) % 10 = 5",
        "url": "https://github.com/yangky11/miniF2F-lean4/blob/b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24/MiniF2F/Test.lean#L39"
      },
      "metadata": {
        "blame_email_hash": "b262f07ece49",
        "blame_date": "2025-03-21T12:42:00+01:00",
        "inclusion_date": "2025-09-13T05:42:04.635029+00:00"
      },
      "id": "53d94ef36afb6c215852b3ef8191501d3eac388c1a08d6cf0f18dea7e5a20f0d"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "Test/realToFloat.lean",
        "start_line": 34,
        "start_column": 2,
        "end_line": 34,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 (fun x =>\n      x.1.exp + isomorph `RealToFloat (fun x => x.2 0) x \u2264 0 \u2227 x.1.exp + isomorph `RealToFloat (fun x => x.2 1) x \u2264 0) =\n    fun p => p.1.exp + p.2 0 \u2264 0 \u2227 p.1.exp + p.2 1 \u2264 0",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/Test/realToFloat.lean#L34"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-11-19T16:57:30-05:00",
        "inclusion_date": "2025-05-29T03:10:06.182872+00:00"
      },
      "id": "7b123661af1232e4b825d524f4b14b91d10feeed79958b038212934ea4eff3f4"
    },
    {
      "repo": {
        "remote": "https://github.com/cmu-l3/llmlean",
        "branch": "kimina-pr",
        "commit": "126a6b2af37727c4d81bb49f6af6b354a380145e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "LLMleanTest/Examples2.lean",
        "start_line": 21,
        "start_column": 2,
        "end_line": 21,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\n\u03b2 : Type u_2\nf : \u03b1 \u2192 \u03b2\ns t : Set \u03b1\nu v : Set \u03b2\n\u22a2 f '' (s \u222a t) = f '' s \u222a f '' t",
        "url": "https://github.com/cmu-l3/llmlean/blob/126a6b2af37727c4d81bb49f6af6b354a380145e/LLMleanTest/Examples2.lean#L21"
      },
      "metadata": {
        "blame_email_hash": "3ab0971ac342",
        "blame_date": "2024-07-23T21:27:45-04:00",
        "inclusion_date": "2025-06-11T03:39:01.065377+00:00"
      },
      "id": "71e9f2f47b4100660b47a7af3ebf19aa4f131afcd478ad1f00bbc1a3ff6bc93a"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/NNG4",
        "branch": "main",
        "commit": "3558f5bfb6c7ec5528498c498ed097c7f772d24f",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "test/induction.lean",
        "start_line": 24,
        "start_column": 4,
        "end_line": 24,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case zero\na c : \u2115\ng : c = 0\nh : a + 0 = a\n\u22a2 0 = 0",
        "url": "https://github.com/leanprover-community/NNG4/blob/3558f5bfb6c7ec5528498c498ed097c7f772d24f/test/induction.lean#L24"
      },
      "metadata": {
        "blame_email_hash": "56c7f595c669",
        "blame_date": "2024-02-29T17:19:01+01:00",
        "inclusion_date": "2025-09-08T18:41:12.023523+00:00"
      },
      "id": "8815eff2a3f7168f298e72b4ace815fc3282bdfa63a6529b9fb4777c4c29b50d"
    },
    {
      "repo": {
        "remote": "https://github.com/mo271/FormalBook",
        "branch": "mathlib_bump_v4.22",
        "commit": "1e02cb575dba482869e55b4b54f299ed879999f5",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FormalBook/Chapter_06.lean",
        "start_line": 89,
        "start_column": 4,
        "end_line": 89,
        "end_column": 9
      },
      "debug_info": {
        "goal": "q n : \u2115\nlamb : \u2102\na : \u211d := \u22ef\nb : \u211d := \u22ef\nh : lamb \u2208 primitiveRoots n \u2102\nh_lamb : lamb \u2260 1\nh_a_lt_one : \u2016a\u2016 < 1\nh_ineq : \u2016eval (\u2191q) (X - C lamb)\u2016 ^ 2 > (\u2191q - 1) ^ 2\nthis\u271d : 0 \u2264 (\u2191q - 1) ^ 2\ng : \u2191q - 1 < \u221a(\u2016eval (\u2191q) (X - C lamb)\u2016 ^ 2)\nthis : \u221a((\u2191q - 1) ^ 2) = \u2191q - 1\n\u22a2 0 \u2264 \u2016eval (\u2191q) (X - C lamb)\u2016",
        "url": "https://github.com/mo271/FormalBook/blob/1e02cb575dba482869e55b4b54f299ed879999f5/FormalBook/Chapter_06.lean#L89"
      },
      "metadata": {
        "blame_email_hash": "ef3bc37f67e8",
        "blame_date": "2025-08-30T22:59:32+02:00",
        "inclusion_date": "2025-09-08T19:42:28.135560+00:00"
      },
      "id": "cab1b39719f7095bccefddff5a9bd9b536cf84b21dc4b57145602685d328103a"
    },
    {
      "repo": {
        "remote": "https://github.com/eric-wieser/lean-matrix-cookbook",
        "branch": "master",
        "commit": "5682ac96f54bd119bd92b053962433c6940b6385",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "MatrixCookbook/10FunctionsAndOperators.lean",
        "start_line": 297,
        "start_column": 12,
        "end_line": 297,
        "end_column": 17
      },
      "debug_info": {
        "goal": "m : Type u_4\nn : Type u_5\ninst\u271d\u00b3 : Fintype m\ninst\u271d\u00b2 : Fintype n\ninst\u271d\u00b9 : DecidableEq m\ninst\u271d : DecidableEq n\nA : Matrix m n \u211d\n\u22a2 sorry A \u2264 \u2191(Fintype.card m) * \u2016A\u2016",
        "url": "https://github.com/eric-wieser/lean-matrix-cookbook/blob/5682ac96f54bd119bd92b053962433c6940b6385/MatrixCookbook/10FunctionsAndOperators.lean#L297"
      },
      "metadata": {
        "blame_email_hash": "897b33679110",
        "blame_date": "2025-08-06T00:45:33+00:00",
        "inclusion_date": "2025-09-17T03:16:16.716963+00:00"
      },
      "id": "8856cdee966e62729ab93363c9a47ec165b4714d75175c0efd6bf8e88d5e554c"
    },
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "54e2692f53004e900064c6f6e8e5a38b2754b0ad",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "Compfiles/Imo1966P5.lean",
        "start_line": 46,
        "start_column": 2,
        "end_line": 46,
        "end_column": 7
      },
      "debug_info": {
        "goal": "x a : Fin 4 \u2192 \u211d\nh\u2080 : Function.Injective a\nh\u2081 : \u2200 (i : Fin 4), \u2211 j, |a i - a j| * x j = 1\n\u22a2 (x 0, x 1, x 2, x 3) = Imo1966P5.solution_fun (a 0, a 1, a 2, a 3)",
        "url": "https://github.com/dwrensha/compfiles/blob/54e2692f53004e900064c6f6e8e5a38b2754b0ad/Compfiles/Imo1966P5.lean#L46"
      },
      "metadata": {
        "blame_email_hash": "62a0bba6d3ac",
        "blame_date": "2025-07-23T20:52:05+08:00",
        "inclusion_date": "2025-09-19T03:11:14.409941+00:00"
      },
      "id": "88e68c9fcfd945117073c4ed172babbb7fc8dd319ebbcb48a25e07e7498a4934"
    },
    {
      "repo": {
        "remote": "https://github.com/FormalizedFormalLogic/Foundation",
        "branch": "generalized-trace",
        "commit": "5c479c65ad77d0b6ad82e6622abd2ad85e349c7d",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean",
        "start_line": 187,
        "start_column": 2,
        "end_line": 187,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u03c6 : Formula \u2115\n\u22a2 Set.Finite (LO.Modal.Formula.gTrace \u03c6) \u2228 @Set.Cofinite \u2115 (LO.Modal.Formula.gTrace \u03c6)",
        "url": "https://github.com/FormalizedFormalLogic/Foundation/blob/5c479c65ad77d0b6ad82e6622abd2ad85e349c7d/Foundation/ProvabilityLogic/Classification/GeneralizedTrace.lean#L187"
      },
      "metadata": {
        "blame_email_hash": "165d0178d95d",
        "blame_date": "2025-09-16T04:05:37+09:00",
        "inclusion_date": "2025-09-17T03:36:03.416511+00:00"
      },
      "id": "fd3bc92fe917375783dbcbdd11dcf3f4eee49977c08dd91ee4b2efb4c923becb"
    },
    {
      "repo": {
        "remote": "https://github.com/fpvandoorn/carleson",
        "branch": "master",
        "commit": "a0242db40daf0c3a31d08fc70ebba2952165de6c",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "Carleson/Classical/CarlesonHunt.lean",
        "start_line": 16,
        "start_column": 81,
        "end_line": 16,
        "end_column": 86
      },
      "debug_info": {
        "goal": "T : \u211d\nhT : Fact (0 < T)\nf : AddCircle T \u2192 \u2102\np : ENNReal\nhp : 1 < p\nhf : MemLp f p AddCircle.haarAddCircle\n\u22a2 \u2200\u1d50 (x : AddCircle T), Filter.Tendsto (fun x_1 => (partialFourierSum' x_1 f) x) Filter.atTop (nhds (f x))",
        "url": "https://github.com/fpvandoorn/carleson/blob/a0242db40daf0c3a31d08fc70ebba2952165de6c/Carleson/Classical/CarlesonHunt.lean#L16"
      },
      "metadata": {
        "blame_email_hash": "0a77110e33df",
        "blame_date": "2025-07-08T17:45:26+02:00",
        "inclusion_date": "2025-09-08T16:13:18.779687+00:00"
      },
      "id": "2e2db0a3e2917628a78cf7fb2e7b0ddba0dd20451741b1c3177a3b72487bed04"
    },
    {
      "repo": {
        "remote": "https://github.com/ImperialCollegeLondon/FLT",
        "branch": "kbuzzard-hardly-ramified",
        "commit": "60be88a841fa232b563ea16600befe5efbfb3d07",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FLT/Basic/Reductions.lean",
        "start_line": 370,
        "start_column": 93,
        "end_line": 370,
        "end_column": 98
      },
      "debug_info": {
        "goal": "P : FLT.FreyPackage\n\u22a2 IsSimpleModule (ZMod (FLT.FreyPackage.p P))\n    (torsionGaloisRepresentation (FLT.FreyPackage.freyCurve P) (FLT.FreyPackage.p P) FLT.Qbar).asModule",
        "url": "https://github.com/ImperialCollegeLondon/FLT/blob/60be88a841fa232b563ea16600befe5efbfb3d07/FLT/Basic/Reductions.lean#L370"
      },
      "metadata": {
        "blame_email_hash": "c7989443bd81",
        "blame_date": "2025-08-21T11:29:27+01:00",
        "inclusion_date": "2025-09-18T04:05:26.332171+00:00"
      },
      "id": "6a8521de0bd0b1654956d5fd33acb5a461bd1e6dc9227f92aabaf4efce69035b"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/duper",
        "branch": "hammer",
        "commit": "df5422589eaaeba41dd92db86155b35961347905",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "Duper/Tests/lastAsylum.lean",
        "start_line": 35,
        "start_column": 13,
        "end_line": 35,
        "end_column": 18
      },
      "debug_info": {
        "goal": "ax1 : \u2200 (x : Inhab), Peculiar x \u2194 (Sane x \u2194 \u00acDoctor x)\nax2 : \u2200 (x : Inhab), Special x \u2194 \u2200 (y : Inhab), \u00acDoctor y \u2194 (Sane y \u2194 Peculiar x)\nax3 : \u2200 (x y : Inhab), (Sane x \u2194 Special y) \u2192 (Sane (bf x) \u2194 \u00acDoctor y)\nax4 : Sane Tarr \u2194 (x : Inhab) \u2192 Doctor x \u2192 Sane x\nax5 : Sane Fether \u2194 \u2200 (x : Inhab), \u00acDoctor x \u2192 \u00acSane x\nax6 : Sane Fether \u2194 Sane Tarr\n\u22a2 False",
        "url": "https://github.com/leanprover-community/duper/blob/df5422589eaaeba41dd92db86155b35961347905/Duper/Tests/lastAsylum.lean#L35"
      },
      "metadata": {
        "blame_email_hash": "d9c480704efb",
        "blame_date": "2022-08-01T22:37:02-04:00",
        "inclusion_date": "2025-09-15T04:46:20.716201+00:00"
      },
      "id": "b10f399c1be308c0af9caeb5a732c473d5d963f46bc8b670c7cd03858b482d5e"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/batteries",
        "branch": "docs",
        "commit": "c3553c06247678bde54544e88d21636d16cd0579",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "BatteriesTest/lintunused.lean",
        "start_line": 7,
        "start_column": 2,
        "end_line": 7,
        "end_column": 7
      },
      "debug_info": {
        "goal": "h : 1 = 1\n\u22a2 True",
        "url": "https://github.com/leanprover-community/batteries/blob/c3553c06247678bde54544e88d21636d16cd0579/BatteriesTest/lintunused.lean#L7"
      },
      "metadata": {
        "blame_email_hash": "45b5ed8e3c8e",
        "blame_date": "2023-08-08T02:17:31+02:00",
        "inclusion_date": "2025-09-19T03:33:33.814695+00:00"
      },
      "id": "4814fe1db1cad5806a4ebdf557e7fa844b8022678599d870bf5764471664720f"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/aesop",
        "branch": "master",
        "commit": "9e8de5716b162ec8983a89711a186d13ff871c22",
        "lean_version": "v4.24.0-rc1"
      },
      "location": {
        "path": "AesopTest/ExtScript.lean",
        "start_line": 108,
        "start_column": 12,
        "end_line": 108,
        "end_column": 17
      },
      "debug_info": {
        "goal": "case a\n\u03b1 \u03b2 \u03b3 \u03b4 \u03b9 : Type\nx y : T\nu v : U\n\u22a2 u = v",
        "url": "https://github.com/leanprover-community/aesop/blob/9e8de5716b162ec8983a89711a186d13ff871c22/AesopTest/ExtScript.lean#L108"
      },
      "metadata": {
        "blame_email_hash": "555bc3b21621",
        "blame_date": "2024-09-10T21:14:20+02:00",
        "inclusion_date": "2025-09-16T04:23:04.307662+00:00"
      },
      "id": "1e8ce90f3fa0da1dec4a09f67fac7341a23f3a94ca268312bedd785bee051f86"
    },
    {
      "repo": {
        "remote": "https://github.com/YaelDillies/LeanCamCombi",
        "branch": "master",
        "commit": "5df79658756ef6d112f2464eec3aece31e35cc83",
        "lean_version": "v4.18.0"
      },
      "location": {
        "path": "LeanCamCombi/ExtrProbCombi/BernoulliSeq.lean",
        "start_line": 118,
        "start_column": 8,
        "end_line": 118,
        "end_column": 13
      },
      "debug_info": {
        "goal": "case refine_1.refine_2\n\u03b1 : Type u_1\n\u03a9 : Type u_2\ninst\u271d\u00b9 : MeasurableSpace \u03a9\nX Y : \u03a9 \u2192 Set \u03b1\n\u03bc : Measure \u03a9\np q : \u211d\u22650\nhX : IsBernoulliSeq X p \u03bc\nhY : IsBernoulliSeq Y q \u03bc\ninst\u271d : IsProbabilityMeasure \u03bc\nh : IndepFun X Y \u03bc\ni : \u03b1\n\u22a2 MeasurableSet fun \u03c9 => Y \u03c9 i",
        "url": "https://github.com/YaelDillies/LeanCamCombi/blob/5df79658756ef6d112f2464eec3aece31e35cc83/LeanCamCombi/ExtrProbCombi/BernoulliSeq.lean#L118"
      },
      "metadata": {
        "blame_email_hash": "97e8591fe714",
        "blame_date": "2025-03-05T14:51:44+00:00",
        "inclusion_date": "2025-04-18T00:01:05.296811+00:00"
      },
      "id": "c5663979c4e4160eb9e17548e7362b1b6a1e30575570fc12969c59fdaf579ebc"
    },
    {
      "repo": {
        "remote": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd",
        "branch": "AK_work",
        "commit": "f4441d7327caa75ae7879ecfda33fc60ab0cf17e",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "PrimeNumberTheoremAnd/MediumPNT.lean",
        "start_line": 7239,
        "start_column": 69,
        "end_line": 7239,
        "end_column": 74
      },
      "debug_info": {
        "goal": "\u03bd : \u211d \u2192 \u211d\n\u03bd_supp : support \u03bd \u2286 Icc (1 / 2) 2\nContDiff1\u03bd : ContDiff \u211d 1 \u03bd\n\u03bd_nonneg : \u2200 x > 0, 0 \u2264 \u03bd x\n\u03bd_massOne : \u222b (x : \u211d) in Ioi 0, \u03bd x / x = 1\nc_close : \u211d\nc_close_pos : c_close > 0\nh_close :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 (\u03b5 : \u211d),\n        0 < \u03b5 \u2192 \u03b5 < 1 \u2192 2 < X * \u03b5 \u2192 \u2016SmoothedChebyshev \u03bd \u03b5 X - \u2191(ChebyshevPsi X)\u2016 \u2264 c_close * \u03b5 * X * Real.log X\n\u03b5_main C_main : \u211d\n\u03b5_main_pos : 0 < \u03b5_main\nC_main_pos : 0 < C_main\nh_main : \u2200 \u03b5 \u2208 Ioo 0 \u03b5_main, \u2016MellinTransform (fun x => \u2191(Smooth1 \u03bd \u03b5 x)) 1 - 1\u2016 \u2264 C_main * \u03b5\nA C_bnd : \u211d\nC_bnd_pos : 0 < C_bnd\nA_in_Ioc : A \u2208 Ioc 0 (1 / 2)\nzeta_bnd : LogDerivZetaHasBound A C_bnd\nholo1 :\n  \u2200 (T : \u211d),\n    3 \u2264 T \u2192\n      HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (Icc (1 - A / Real.log T ^ 9) 2 \u00d7\u2102 Icc (-T) T \\ {1})\n\u03c3\u2082' : \u211d\n\u03c3\u2082 : \u211d := max \u03c3\u2082' (1 / 2)\n\u03c3\u2082_pos : 0 < \u03c3\u2082\n\u03c3\u2082_lt_one : \u03c3\u2082 < 1\nholo2 : HolomorphicOn (fun s => deriv riemannZeta s / riemannZeta s) (uIcc \u03c3\u2082 2 \u00d7\u2102 uIcc (-3) 3 \\ {1})\nc\u2081 : \u211d\nc\u2081pos : c\u2081 > 0\nhc\u2081 : \u2200 (\u03b5 : \u211d), 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2081 \u03bd \u03b5 X T\u2016 \u2264 c\u2081 * X * Real.log X / (\u03b5 * T)\nc\u2082 : \u211d\nc\u2082pos : 0 < c\u2082\nhc\u2082 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2082 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2082 * X / (\u03b5 * T)\nc\u2083 : \u211d\nc\u2083pos : 0 < c\u2083\nhc\u2083 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2083 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2083 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2085 : \u211d\nc\u2085pos : 0 < c\u2085\nhc\u2085 : \u2200 (X : \u211d), 3 < X \u2192 \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2016I\u2085 \u03bd \u03b5 X \u03c3\u2082\u2016 \u2264 c\u2085 * X ^ \u03c3\u2082 / \u03b5\nc\u2087 : \u211d\nc\u2087pos : 0 < c\u2087\nhc\u2087 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2087 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2087 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2088 : \u211d\nc\u2088pos : 0 < c\u2088\nhc\u2088 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              3 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2088 \u03bd \u03b5 T X \u03c3\u2081\u2016 \u2264 c\u2088 * X / (\u03b5 * T)\nc\u2089 : \u211d\nc\u2089pos : c\u2089 > 0\nhc\u2089 : \u2200 {\u03b5 : \u211d}, 0 < \u03b5 \u2192 \u03b5 < 1 \u2192 \u2200 (X : \u211d), 3 < X \u2192 \u2200 {T : \u211d}, 3 < T \u2192 \u2016I\u2089 \u03bd \u03b5 X T\u2016 \u2264 c\u2089 * X * Real.log X / (\u03b5 * T)\nc\u2084 : \u211d\nc\u2084pos : 0 \u2264 c\u2084\nTlb\u2084 : \u211d\nTlb\u2084bnd : 3 < Tlb\u2084\nhc\u2084 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2084 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2084 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2084 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nc\u2086 : \u211d\nc\u2086pos : 0 \u2264 c\u2086\nTlb\u2086 : \u211d\nTlb\u2086bnd : 3 < Tlb\u2086\nhc\u2086 :\n  \u2200 (X : \u211d),\n    3 < X \u2192\n      \u2200 {\u03b5 : \u211d},\n        0 < \u03b5 \u2192\n          \u03b5 < 1 \u2192\n            \u2200 {T : \u211d},\n              Tlb\u2086 < T \u2192\n                let \u03c3\u2081 := 1 - A / Real.log T ^ 9;\n                \u2016I\u2086 \u03bd \u03b5 X \u03c3\u2081 \u03c3\u2082\u2016 \u2264 c\u2086 * X * X ^ (-A / Real.log T ^ 9) / \u03b5\nC' : \u211d := c_close + C_main\nC'' : \u211d := c\u2081 + c\u2082 + c\u2088 + c\u2089\nC''' : \u211d := c\u2083 + c\u2084 + c\u2086 + c\u2087\nc : \u211d := sorry\ncpos : 0 < c\nC : \u211d := sorry\n\u03b5x : \u211d \u2192 \u211d := fun x => Real.exp (-c * Real.log x ^ (1 / 10))\nTx : \u211d \u2192 \u211d := fun x => Real.exp (2 * c * Real.log x ^ (1 / 10))\neventually_\u03b5x_lt_one : \u2200\u1da0 (x : \u211d) in atTop, \u03b5x x < 1\neventually_2_lt : \u2200\u1da0 (x : \u211d) in atTop, 2 < x * \u03b5x x\neventually_T_gt_3 : \u2200\u1da0 (x : \u211d) in atTop, 3 < Tx x\n\u22a2 \u2200\u1da0 (x : \u211d) in atTop, Tlb\u2084 < Tx x",
        "url": "https://github.com/AlexKontorovich/PrimeNumberTheoremAnd/blob/f4441d7327caa75ae7879ecfda33fc60ab0cf17e/PrimeNumberTheoremAnd/MediumPNT.lean#L7239"
      },
      "metadata": {
        "blame_email_hash": "4bcdc021face",
        "blame_date": "2025-07-21T22:55:17-04:00",
        "inclusion_date": "2025-07-22T23:05:23.619594+00:00"
      },
      "id": "ab45db011ff579439802d97650575f51cff241868f6ff05100641ebf1113414d"
    },
    {
      "repo": {
        "remote": "https://github.com/emilyriehl/infinity-cosmos",
        "branch": "main",
        "commit": "8edc65d468b3ed2e4933c7969ec53bd4d904e753",
        "lean_version": "v4.18.0-rc1"
      },
      "location": {
        "path": "InfinityCosmos/ForMathlib/AlgebraicTopology/SimplicialSet/Homotopy.lean",
        "start_line": 135,
        "start_column": 36,
        "end_line": 135,
        "end_column": 41
      },
      "debug_info": {
        "goal": "A : SSet\nf\u271d g\u271d f g h : A _\u298b1\u298c\nH\u2081 : HomotopyL f g\nH\u2082 : HomotopyL f h\n\u03c3 : Subpresheaf.toPresheaf \u039b[3, 1] \u27f6 A := sorry\n\u03c4 : A _\u298b3\u298c := sorry\n\u03c4\u2080 : SimplicialObject.\u03b4 A 0 \u03c4 = (SimplicialObject.\u03b4 A 0 \u226b SimplicialObject.\u03c3 A 0 \u226b SimplicialObject.\u03c3 A 0) g\n\u03c4\u2082 : SimplicialObject.\u03b4 A 2 \u03c4 = H\u2082.simplex\n\u22a2 SimplicialObject.\u03b4 A 3 \u03c4 = H\u2081.simplex",
        "url": "https://github.com/emilyriehl/infinity-cosmos/blob/8edc65d468b3ed2e4933c7969ec53bd4d904e753/InfinityCosmos/ForMathlib/AlgebraicTopology/SimplicialSet/Homotopy.lean#L135"
      },
      "metadata": {
        "blame_email_hash": "f0d6831918ab",
        "blame_date": "2024-12-17T23:14:43+01:00",
        "inclusion_date": "2025-05-05T23:23:15.244940+00:00"
      },
      "id": "74b2f697370a4a9bddd820434ad83e677b9b29e13abf89b3e889097d2c59a6cc"
    },
    {
      "repo": {
        "remote": "https://github.com/lean-ja/lean-by-example",
        "branch": "main",
        "commit": "3d8e1994e2522b249c36b71db17765a779eaa787",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "LeanByExample/Tactic/Induction.lean",
        "start_line": 228,
        "start_column": 6,
        "end_line": 228,
        "end_column": 11
      },
      "debug_info": {
        "goal": "n\u271d n : \u2115\n\u22a2 sum (n + 1) = \u2191(n + 1) * (\u2191(n + 1) + 1) / 2",
        "url": "https://github.com/lean-ja/lean-by-example/blob/3d8e1994e2522b249c36b71db17765a779eaa787/LeanByExample/Tactic/Induction.lean#L228"
      },
      "metadata": {
        "blame_email_hash": "a84937a2d49e",
        "blame_date": "2025-07-20T16:48:19+09:00",
        "inclusion_date": "2025-09-15T04:41:33.921583+00:00"
      },
      "id": "ba1971ee87303ab91319bb1d9e7d2b27ec5b99e55f2e7dcdebe2b6d7aa881c77"
    },
    {
      "repo": {
        "remote": "https://github.com/teorth/pfr",
        "branch": "master",
        "commit": "58ff9ddb3f6bc3860fb0316cc210fca5d488ba62",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "PFR/ApproxHomPFR.lean",
        "start_line": 234,
        "start_column": 114,
        "end_line": 234,
        "end_column": 119
      },
      "debug_info": {
        "goal": "G : Type u_1\ninst\u271d\u00b2 : AddCommGroup G\ninst\u271d\u00b9 : Fintype G\ninst\u271d : Module (ZMod 2) G\nA : Set G\n\u22a2 \u2203 \u03c6, Nat.card \u2191{x | x \u2208 A \u2227 \u03c6 x = 1} \u2265 (Nat.card \u2191A - 1) / 2",
        "url": "https://github.com/teorth/pfr/blob/58ff9ddb3f6bc3860fb0316cc210fca5d488ba62/PFR/ApproxHomPFR.lean#L234"
      },
      "metadata": {
        "blame_email_hash": "d7f0e4a42bbb",
        "blame_date": "2025-05-01T23:21:54-07:00",
        "inclusion_date": "2025-07-05T05:06:27.171280+00:00"
      },
      "id": "52b37f4e82e5289a2e316f09e097e70ba88ff156bc0b7f3d75122cdcb1fb29c5"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/mathlib4",
        "branch": "ocfnash/concrete_g2",
        "commit": "df98409817547fdb6b54dab7643a9557437c0462",
        "lean_version": "v4.21.0-rc3"
      },
      "location": {
        "path": "Mathlib/LinearAlgebra/RootSystem/Finite/G2.lean",
        "start_line": 602,
        "start_column": 4,
        "end_line": 602,
        "end_column": 9
      },
      "debug_info": {
        "goal": "\u03b9 : Type u_1\nR : Type u_2\nM : Type u_3\nN : Type u_4\ninst\u271d\u2075 : CommRing R\ninst\u271d\u2074 : AddCommGroup M\ninst\u271d\u00b3 : Module R M\ninst\u271d\u00b2 : AddCommGroup N\ninst\u271d\u00b9 : Module R N\nP : RootPairing \u03b9 R M N\ninst\u271d : CharZero R\n\u22a2 Submodule.span R\n      (Set.range\n        \u21d1({ toFun := List.get RootPairing.EmbeddedG2.allCocoeffs, inj' := \u22ef }.trans\n            { toFun := fun x => Int.cast \u2218 x, inj' := \u22ef })) =\n    \u22a4",
        "url": "https://github.com/leanprover-community/mathlib4/blob/df98409817547fdb6b54dab7643a9557437c0462/Mathlib/LinearAlgebra/RootSystem/Finite/G2.lean#L602"
      },
      "metadata": {
        "blame_email_hash": "1b004c50e78f",
        "blame_date": "2025-06-18T13:01:58+01:00",
        "inclusion_date": "2025-06-19T03:05:54.574593+00:00"
      },
      "id": "ad2f31798fdc1b330ef7f966012fde2917ddc630c1f5e9aa1c316ecd8c298365"
    },
    {
      "repo": {
        "remote": "https://github.com/PatrickMassot/GlimpseOfLean",
        "branch": "master",
        "commit": "204163b503591e96357e339158a962ad5d5f4e5d",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "GlimpseOfLean/Exercises/Topics/RingTheory.lean",
        "start_line": 72,
        "start_column": 4,
        "end_line": 72,
        "end_column": 9
      },
      "debug_info": {
        "goal": "R : Type u_1\nS : Type u_2\ninst\u271d\u00b2 : CommRing R\ninst\u271d\u00b9 : CommRing S\nT : Type u_3\ninst\u271d : CommRing T\ng : S \u2192+* T\nf : R \u2192+* S\n\u22a2 g (f 0) = 0",
        "url": "https://github.com/PatrickMassot/GlimpseOfLean/blob/204163b503591e96357e339158a962ad5d5f4e5d/GlimpseOfLean/Exercises/Topics/RingTheory.lean#L72"
      },
      "metadata": {
        "blame_email_hash": "c28576c1d1dd",
        "blame_date": "2025-04-20T11:35:58+02:00",
        "inclusion_date": "2025-09-18T04:26:21.591374+00:00"
      },
      "id": "f77ab73602da42ca0b99a99beeb159c650a7b2442ed47923ca7d71f438aa5235"
    },
    {
      "repo": {
        "remote": "https://github.com/nomeata/loogle",
        "branch": "master",
        "commit": "15beac7f2a5913571cba016e4b87fed907c54f7d",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "Tests.lean",
        "start_line": 227,
        "start_column": 78,
        "end_line": 227,
        "end_column": 83
      },
      "debug_info": {
        "goal": "\u03b1 : Type u_1\ninst\u271d\u00b2 : Zero \u03b1\ninst\u271d\u00b9 : HMul \u03b1 \u03b1 \u03b1\ninst\u271d : LE \u03b1\na : \u03b1\n\u22a2 0 \u2264 a * a",
        "url": "https://github.com/nomeata/loogle/blob/15beac7f2a5913571cba016e4b87fed907c54f7d/Tests.lean#L227"
      },
      "metadata": {
        "blame_email_hash": "1e9dd229978a",
        "blame_date": "2023-11-11T14:02:18+01:00",
        "inclusion_date": "2025-09-17T04:17:32.820406+00:00"
      },
      "id": "6e6fe559e40694f894e6fae86581862b0f3621ca1143341c4a04248ae76124a1"
    },
    {
      "repo": {
        "remote": "https://github.com/Verified-zkEVM/ZKLib",
        "branch": "duplex-sponge-fs",
        "commit": "0fc5523909130c6100b03cf4a7afb3566f27e485",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean",
        "start_line": 155,
        "start_column": 2,
        "end_line": 155,
        "end_column": 7
      },
      "debug_info": {
        "goal": "bits : Fin (KoalaBear.twoAdicity + 1)\nh : KoalaBear.twoAdicGenerators[bits] \u2260 0\n\u22a2 Units.mk0 KoalaBear.twoAdicGenerators[bits] h \u2208 rootsOfUnity (2 ^ \u2191bits) KoalaBear.Field",
        "url": "https://github.com/Verified-zkEVM/ZKLib/blob/0fc5523909130c6100b03cf4a7afb3566f27e485/ArkLib/Data/FieldTheory/NonBinaryField/KoalaBear.lean#L155"
      },
      "metadata": {
        "blame_email_hash": "d0850777cf0b",
        "blame_date": "2025-09-12T02:34:43-04:00",
        "inclusion_date": "2025-09-18T04:30:57.445731+00:00"
      },
      "id": "90fc78612318e8a0b323facb5491137c3092f5955e113f242beb739123999983"
    },
    {
      "repo": {
        "remote": "https://github.com/HEPLean/PhysLean",
        "branch": "Inertia",
        "commit": "1597a1afa1c8c9794baad65270a05523d232cfa9",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean",
        "start_line": 276,
        "start_column": 2,
        "end_line": 276,
        "end_column": 7
      },
      "debug_info": {
        "goal": "S : HarmonicOscillator\nIC : ClassicalMechanics.HarmonicOscillator.InitialConditions\n\u22a2 S.energy (ClassicalMechanics.HarmonicOscillator.sol S IC) = fun x =>\n    1 / 2 *\n      (S.m * \u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.v\u2080 IC\u2016 ^ 2 +\n        S.k * \u2016ClassicalMechanics.HarmonicOscillator.InitialConditions.x\u2080 IC\u2016 ^ 2)",
        "url": "https://github.com/HEPLean/PhysLean/blob/1597a1afa1c8c9794baad65270a05523d232cfa9/PhysLean/ClassicalMechanics/HarmonicOscillator/Solution.lean#L276"
      },
      "metadata": {
        "blame_email_hash": "7187e3a9e9f5",
        "blame_date": "2025-09-11T15:35:52+01:00",
        "inclusion_date": "2025-09-12T04:22:08.671672+00:00"
      },
      "id": "f9329999159fb0dad47a5d594f75c7ffff3eb24c1248d456cdb1d183be46271d"
    },
    {
      "repo": {
        "remote": "https://github.com/ufmg-smite/lean-smt",
        "branch": "main",
        "commit": "98b12d984f8c21a99abfb8b69f12fe243beaf7c6",
        "lean_version": "v4.16.0"
      },
      "location": {
        "path": "Smt/Reconstruct/Rat/Core.lean",
        "start_line": 635,
        "start_column": 2,
        "end_line": 635,
        "end_column": 7
      },
      "debug_info": {
        "goal": "a : Rat\nh : a \u2264 0\n\u22a2 a.abs = -a",
        "url": "https://github.com/ufmg-smite/lean-smt/blob/98b12d984f8c21a99abfb8b69f12fe243beaf7c6/Smt/Reconstruct/Rat/Core.lean#L635"
      },
      "metadata": {
        "blame_email_hash": "a29bc6f92c6c",
        "blame_date": "2025-05-03T21:48:26-07:00",
        "inclusion_date": "2025-05-05T00:05:16.483689+00:00"
      },
      "id": "7a709f0c9989019b9a5de1dda3304164c454fa35d3661d334da648f0a996c47e"
    },
    {
      "repo": {
        "remote": "https://github.com/yangky11/miniF2F-lean4",
        "branch": "main",
        "commit": "b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24",
        "lean_version": "v4.21.0"
      },
      "location": {
        "path": "MiniF2F/Test.lean",
        "start_line": 80,
        "start_column": 46,
        "end_line": 80,
        "end_column": 51
      },
      "debug_info": {
        "goal": "\u22a2 (\u2211 k \u2208 Finset.range 101, k) % 6 = 4",
        "url": "https://github.com/yangky11/miniF2F-lean4/blob/b5c6d30e75ae0e833d52d7a9e756e11ecfa92e24/MiniF2F/Test.lean#L80"
      },
      "metadata": {
        "blame_email_hash": "b262f07ece49",
        "blame_date": "2025-03-21T12:42:00+01:00",
        "inclusion_date": "2025-09-13T05:42:04.635029+00:00"
      },
      "id": "5cabb254eaddb73ef3da71cf28d814ef5d90b633de89a9445ae620157c7d53a9"
    },
    {
      "repo": {
        "remote": "https://github.com/lecopivo/SciLean",
        "branch": "bump-v4.19.0-rc2",
        "commit": "612daaaa9f63016cd8d06df8e634e4d858d26d8e",
        "lean_version": "v4.19.0-rc2"
      },
      "location": {
        "path": "SciLean/Modules/Prob/DerivUnderIntegralSign.lean",
        "start_line": 32,
        "start_column": 41,
        "end_line": 32,
        "end_column": 46
      },
      "debug_info": {
        "goal": "X : Type u_2\ninst\u271d\u00b3 : NormedAddCommGroup X\ninst\u271d\u00b2 : NormedSpace \u211d X\nY : Type u_1\nx\u271d : MeasurableSpace Y\nZ : Type u_3\ninst\u271d\u00b9 : NormedAddCommGroup Z\ninst\u271d : NormedSpace \u211d Z\n\u03bc : X \u2192 Measure Y\nf : X \u2192 Y \u2192 Z\nx dx : X\nh : DifferentiableUnderIntegralAt f \u03bc x\n\u22a2 (fderiv \u211d (fun x => \u222b (y : Y), f x y \u2202\u03bc x) x) dx =\n    (fderiv \u211d (fun x' => \u222b (y : Y), f x y \u2202\u03bc x') x) dx + \u222b (y : Y), (fderiv \u211d (fun x => f x y) x) dx \u2202\u03bc x",
        "url": "https://github.com/lecopivo/SciLean/blob/612daaaa9f63016cd8d06df8e634e4d858d26d8e/SciLean/Modules/Prob/DerivUnderIntegralSign.lean#L32"
      },
      "metadata": {
        "blame_email_hash": "c7c59fe619b9",
        "blame_date": "2024-02-12T01:13:42+01:00",
        "inclusion_date": "2025-05-29T03:10:06.182872+00:00"
      },
      "id": "e66469233f8695318fb5a7795a86667299fdda620175d88571bb47deba716703"
    },
    {
      "repo": {
        "remote": "https://github.com/cmu-l3/llmlean",
        "branch": "kimina-pr",
        "commit": "126a6b2af37727c4d81bb49f6af6b354a380145e",
        "lean_version": "v4.19.0"
      },
      "location": {
        "path": "LLMleanTest/Examples2.lean",
        "start_line": 98,
        "start_column": 2,
        "end_line": 98,
        "end_column": 7
      },
      "debug_info": {
        "goal": "\u22a2 InjOn log {x | x > 0}",
        "url": "https://github.com/cmu-l3/llmlean/blob/126a6b2af37727c4d81bb49f6af6b354a380145e/LLMleanTest/Examples2.lean#L98"
      },
      "metadata": {
        "blame_email_hash": "3ab0971ac342",
        "blame_date": "2024-07-23T21:27:45-04:00",
        "inclusion_date": "2025-06-11T03:39:01.065377+00:00"
      },
      "id": "27e78229d1b07b4b504fc73f42e70495c0c17c27b79c15150454987ed610f504"
    },
    {
      "repo": {
        "remote": "https://github.com/leanprover-community/NNG4",
        "branch": "main",
        "commit": "3558f5bfb6c7ec5528498c498ed097c7f772d24f",
        "lean_version": "v4.22.0"
      },
      "location": {
        "path": "test/induction.lean",
        "start_line": 33,
        "start_column": 4,
        "end_line": 33,
        "end_column": 9
      },
      "debug_info": {
        "goal": "case succ\na c d : \u2115\nhd : c = 0 \u2192 a + d = a \u2192 d = 0\ng : c = 0\nh : a + d.succ = a\n\u22a2 d.succ = 0",
        "url": "https://github.com/leanprover-community/NNG4/blob/3558f5bfb6c7ec5528498c498ed097c7f772d24f/test/induction.lean#L33"
      },
      "metadata": {
        "blame_email_hash": "56c7f595c669",
        "blame_date": "2024-02-29T17:19:01+01:00",
        "inclusion_date": "2025-09-08T18:41:12.023523+00:00"
      },
      "id": "f75d50b20ded4233132438a62291a5fbbf446f334fd25a6f4e378595e5dd8fe6"
    },
    {
      "repo": {
        "remote": "https://github.com/mo271/FormalBook",
        "branch": "mathlib_bump_v4.22",
        "commit": "1e02cb575dba482869e55b4b54f299ed879999f5",
        "lean_version": "v4.23.0-rc2"
      },
      "location": {
        "path": "FormalBook/Chapter_01.lean",
        "start_line": 184,
        "start_column": 50,
        "end_line": 184,
        "end_column": 55
      },
      "debug_info": {
        "goal": "n : \u2115\nx : \u211d\nhxge : x \u2265 \u2191n\nhxlt : x < \u2191n + 1\n\u22a2 Real.log x \u2264 \u2211 k \u2208 Icc 1 n, (\u2191k)\u207b\u00b9",
        "url": "https://github.com/mo271/FormalBook/blob/1e02cb575dba482869e55b4b54f299ed879999f5/FormalBook/Chapter_01.lean#L184"
      },
      "metadata": {
        "blame_email_hash": "ef3bc37f67e8",
        "blame_date": "2025-08-30T22:25:38+02:00",
        "inclusion_date": "2025-09-08T19:42:28.135560+00:00"
      },
      "id": "0809d97d3740c3891c53998ce9c34ff6eab7a9b39f5b527a07e89b9d8eaddd1a"
    },
    {
      "repo": {
        "remote": "https://github.com/eric-wieser/lean-matrix-cookbook",
        "branch": "master",
        "commit": "5682ac96f54bd119bd92b053962433c6940b6385",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "MatrixCookbook/10FunctionsAndOperators.lean",
        "start_line": 297,
        "start_column": 34,
        "end_line": 297,
        "end_column": 39
      },
      "debug_info": {
        "goal": "m : Type u_4\nn : Type u_5\ninst\u271d\u00b3 : Fintype m\ninst\u271d\u00b2 : Fintype n\ninst\u271d\u00b9 : DecidableEq m\ninst\u271d : DecidableEq n\nA : Matrix m n \u211d\n\u22a2 sorry A \u2264 \u221a\u2191(Fintype.card m) * \u2016A\u2016",
        "url": "https://github.com/eric-wieser/lean-matrix-cookbook/blob/5682ac96f54bd119bd92b053962433c6940b6385/MatrixCookbook/10FunctionsAndOperators.lean#L297"
      },
      "metadata": {
        "blame_email_hash": "897b33679110",
        "blame_date": "2025-08-06T00:45:33+00:00",
        "inclusion_date": "2025-09-17T03:16:16.716963+00:00"
      },
      "id": "f235e4faaff3d446bea39c57ad68cad3213a8c1d1d62aa819e9066ceb02b9a47"
    },
    {
      "repo": {
        "remote": "https://github.com/dwrensha/compfiles",
        "branch": "main",
        "commit": "4fadf20b58f84ebd2332c904cc7298c13bfbe5f7",
        "lean_version": "v4.22.0-rc4"
      },
      "location": {
        "path": "Compfiles/Usa1993P3.lean",
        "start_line": 110,
        "start_column": 25,
        "end_line": 110,
        "end_column": 30
      },
      "debug_info": {
        "goal": "f : \u2191(Set.Icc 0 1) \u2192 \u211d\nx\u271d : \u211d\nhx : 0 \u2264 x\u271d \u2227 x\u271d \u2264 1\nh1 : \u2200 (x : \u2191(Set.Icc 0 1)), 0 \u2264 f x\nh2 : f 1 = 1\nh3 : \u2200 (x y : \u2191(Set.Icc 0 1)) (h : \u2191x + \u2191y \u2208 Set.Icc 0 1), f x + f y \u2264 f \u27e8\u2191x + \u2191y, h\u27e9\nh4 : \u2200 (x : \u2191(Set.Icc 0 1)), 1 - \u2191x \u2208 Set.Icc 0 1\nh5 : \u2200 (x : \u2191(Set.Icc 0 1)), f x + f \u27e81 - \u2191x, \u22ef\u27e9 \u2264 1\nh6 : \u2200 (x : \u2191(Set.Icc 0 1)), f x \u2264 1\nh8 : \u2200 (n : \u2115) (x : \u2191(Set.Icc 0 (1 / 2 ^ n))), 2 ^ n * \u2191x \u2208 Set.Icc 0 1\nn : \u2115\nx : \u2191(Set.Icc 0 (1 / 2 ^ n))\n\u22a2 \u2191x \u2208 Set.Icc 0 1",
        "url": "https://github.com/dwrensha/compfiles/blob/4fadf20b58f84ebd2332c904cc7298c13bfbe5f7/Compfiles/Usa1993P3.lean#L110"
      },
      "metadata": {
        "blame_email_hash": "acdd9d7e744e",
        "blame_date": "2025-07-12T11:07:23-04:00",
        "inclusion_date": "2025-07-30T19:16:21.692704+00:00"
      },
      "id": "c857bbbdfd38b5b6b82e483c76b3d97becae9bc9585e096a8d864f419b374a93"
    }
  ]
}